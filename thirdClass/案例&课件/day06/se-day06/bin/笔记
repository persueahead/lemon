注解
   常见的注解
   1.重写注解
  		@Override
      限定重写父类的方法，该注解只能用在方法上
    2.过时的注解  ,推荐不使用，但是你要是使用也没有问题的
    	@Deprecated
    3.压制警告的
	    @SuppressWarnings
	    		消除警示,
	    @SuppressWarnings (value ={"unused"})
2/自定义注解
      	//标识一个注解
		public @interface MySuper {
			//没有带上值的
		   String name();
		   //也可以带上默认值‘  
		   String values() default "同学都理解java";
		   //也可以使用数组
		   String[]  key();
		}
		
		@MySuper(key = { "xxxxx" }, name = "ooooo")
		class  Person{
			@Deprecated
			public void testname() throws Exception {
			}
		}   
JDK中的元注解
  	@Target		
	@Retention	
	@Documented
	@ Inherited(了解)
	
	
1.@Retention	
	指示注释类型的注释要保留多久。
	如果注释类型声明中不存在 Retention 注释，
	则保留策略默认为 RetentionPolicy.CLASS。
	参数类型
	 RetentionPolicy.SOURCE
	 			 编译器将把注释记录在类文件中，但在运行时 VM 不需要保留注释。
	  RetentionPolicy.RUNTIME 
				 编译器将把注释记录在类文件中，在运行时 VM 将保留注释，因此可以反射性地读取。
	   RetentionPolicy.CLASS 
	   			编译器要丢弃的注释。
2.@Target	
    	如果注释类型声明中不存在 Target 元注释，则声明的类型可以用在任一程序元素上。
    	如果存在这样的元注释，则编译器强制实施指定的使用限制
		说白就是现在你自定义的注解使用的地方
   参数类型的使用
       ANNOTATION_TYPE 
         	 注释类型声明 
		CONSTRUCTOR 
		          构造方法声明 
		FIELD 
		          字段声明（包括枚举常量） 
		LOCAL_VARIABLE 
		          局部变量声明 
		METHOD 
		          方法声明 
		PACKAGE 
		          包声明 
		PARAMETER 
		          参数声明 
		TYPE 
		          类、接口（包括注释类型）或枚举声明 
  		使用方式如：@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})
        		
3.@Documented		
	指示某一类型的注释将通过 javadoc 和类似的默认工具进行文档化
	说白了,就是可以生产文档注解上的说明
	(
	  JavaDoc工具用来提前文档的
	)
	注意:
	  主要定义了该注解@Documented	,那么必须将@Retention注解设置为RetentionPolicy.RUNTIME 
4.@Inherited(了解)
 		指示注释类型被自动继承
 	只要被该注解进行修饰了的，都具有继承性，
 	如:某个类,被修饰了，则该类的子类将自动拥有给注解
 	了解，一般情况使用的少
4-1.判断某个注解时候存在
     注意:@Retention的参数必须是RetentionPolicy.RUNTIME才可进行获取
   		public void testname() throws Exception {
		Method[]  app=  this.getClass().getDeclaredMethods();
          for (Method method : app) {
			System.out.println(method.getName());
			String str=	method.getName();
			System.out.println(method.isAnnotationPresent(Deprecated.class));
			if(method.isAnnotationPresent(Deprecated.class)) {
				System.out.println("----XUXUX---------");
				
			}
		} 			
4-2 获取当前对象的注解
    	Annotation[]  ann= this.getClass().getAnnotations();
		for (Annotation annotation : ann) {
			System.out.println(annotation.getClass().getName());
		}
5、测试注解的使用
  可以在同类中编写多个测试类
	@Test
	public void test01() throws Exception {
		  System.out.println("我进行测试了数据test01");
	}
	@Test
	public void test02() throws Exception {
		  System.out.println("我进行测试了数据test02");
	}		
	/**
	 * 标识在测试类(标识了@Test的这个类)之前进行执行
	 * @throws Exception
	 */
	@Before
	public void testname() throws Exception {
		 System.out.println("======@Before===========");
	}	
	/**
	 * 在测试类之后进行执行的方法
	 * @throws Exception
	 */
	@After
	public void testname01() throws Exception {
		System.out.println("==========@After==========");
	}	
	
==================================
Mysql
    1、sql的描述(结构化得查询语句)
          1.SQL(structured query language) :结构化得查询语句
           而结构化得查询语句是数据的的一种设计语言用于存取数据以及查询,同时也是数据库的脚步的扩展名
          2.结构化数据是高级的非过程化得编程语言，允许用户在高级数据结构中进行工作
          3.不要指定用户对数据的存放方法，也不需要用户了解具体的数据存放的方式
            所有具备了完全不同的底层的数据结构的不同数据库系统(如:mysql  sqlserivce  Oracle ...关系型数据库/非关系型数据库(先了解)  ) 
            可以使用相同的结构化查询语句作为数据输入与管理的接口 
          4.结构化查询语句可以进行嵌套，这样就使结构化查询语句更加的灵活更加的强大
  2、SQL语句的分类
     DDL
		数据定义语言
		  在数据库中进行创建或者删除表 
     DQL
     	   数据查询原因  
     	    就是在数据库中进行查询数据表的语言 
     DML
                    数据操作语言,就是数据表中的 数据进行添加，修改,删除
     DCL 
                      数据控制语言
     
  
               	
	
	
	
	
	
	
	
	
	
		