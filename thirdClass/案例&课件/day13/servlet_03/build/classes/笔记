文件下载案列
     servlet代码
		           /**
			    * 文件下载
			    */
			   //获取请求的参数,文件下载的名称
				String fileName=request.getParameter("filename");
				/**
				 * 使用字节流中的输入流加载文件到内存中
				 */
				  //2找到文件服务器路径
				ServletContext servletContext=	this.getServletContext();
			String realPath=	servletContext.getRealPath("/img/"+fileName);
				  //使用字节流进行关联
			FileInputStream file=   new FileInputStream(realPath);
			      /**
			       * 设置响应头的消息	
			       */
				   //设置响应头类型
			//获取
			String mimeType=servletContext.getMimeType(fileName);
			  //设置
			response.setHeader("content-type", mimeType);
			   /**
			    * 进行设置响应头打开的方式
			    */
				//由于会出现乱码的问题，先进行格式化
			fileName= URLEncoder.encode(fileName,"UTF-8");
			   //设置响应头打开的方式
			response.setHeader("content-disposition", "attachment;filename="+fileName);
			  //将输入的数据写出到输出流中
		    ServletOutputStream  so=	response.getOutputStream();     
		    byte[]  buff=    new  byte[1024*1024];
		    int  len=0;
		    while((len=file.read(buff))!=-1) {
		    	so.write(buff,0,len);
		    }
		    file.close();	
     jsp代码
        <a href="TestServlet01?filename=19年7月24日后Java全栈工程师大纲.xlsx">点击下载文件</a>
  
=============================
Cookie
     讲解Cookie前先进行描述下会话
         会话什么？
         1、会话就是，一次会话中可包含多次的请求和响应
         如你给你女票打电话
           【说白了，就是客户端和服务端之间的会话】
     1-1、会话的周期是什么？
                    浏览器器的第一次给了服务器进行发送请求，从而进行建立暧昧的会话，直到其中的一方断开为止
     1-2、能做什么？
                   在一次会话中的范围内可以进行多次请求，共享数据
     1-3、常见的会话方式
          Cookie【在客户端会话】
          Session 【在服务端会话】          
     
Cookie  
   1、客户端会话技术，说白了就将数据保存到客户端  
     
   2、入门案例
   	   创建Cookie进行绑定数据
     	new  Cookie(String  key,String  vales);    
  	  进程发送Cookie对象   
     	 response.addCookie(Cookie cookie);
		        //1.创建cookie
				Cookie  cook= new Cookie("name","admin");
				//2、发送Cookie
				response.addCookie(cook);
	获取Cookie值
	      request.getCookies();			  
     			  
				Cookie[]  cook=request.getCookies();
				 for (Cookie cookie : cook) {
			       cookie.setValue("name");
			       System.out.println( cookie.getName());
			       System.out.println( cookie);
				 }
 3、执行的流程图(如图)      
4、发送多个Cookie
     说白了，就是创建多个Cookie对象
     		Cookie  cook=	  new Cookie("name","admin");
			Cookie  cook1=	  new Cookie("age","123");
			response.addCookie(cook);
			response.addCookie(cook1);      
5、设置Cookie在浏览器中保存的时间
		    1、默认的情况下，
		       		当浏览器关闭后，Cookie中数据被进行销毁
			2、  持久化存储
			     setMaxAge(int  i)
			                          存入的参数3种    
		   					正数
		   					    1、将Cookie数据写到硬盘的文件中
		   					    2、持久化存储并指定cookie的存活时间
		   					    3、到时间到了，cookie文件会进行指定的消失
		   					负数
		   					    1、默认值:当浏览器关闭后，Cookie中数据被进行销毁
		   					零
		   					    1、删除cookie消息
		   			   如代码：
  					Cookie  cook1=	  new Cookie("phone","1234567890");
							//测试Cookie的时间
							//在30之内，Cookie进行持久化到硬盘中，30之后会进行自动的删除Cookie文件
							cook1.setMaxAge(50);//30秒
					//		cook1.setMaxAge(-1);//默认
						//	cook1.setMaxAge(0);//删除
							response.addCookie(cook1);
5、设置Cookie存储中文
	 1、tomcat8之前Cookie是不能进行直接存储中文数据
	 2、tomcat8之后是支持的  
	 3、处理中文   
	       	  //处理乱码
			response.setCharacterEncoding("UTF-8");
			Cookie  cook=	new Cookie("name",URLDecoder.decode( "小张","UTF-8"));
			response.addCookie(cook);
		      //获取Cookie 需要进行转码
		      //获取Cookie'
			Cookie[]  cs=	request.getCookies();
			if(cs!=null) {
				for (Cookie cookie : cs) {
				String  name=	cookie.getName();
				String value=	cookie.getValue();
					System.out.println(name+":"+value);
					System.out.println(name+":"+URLDecoder.decode(value,"UTF-8"));
				}
			}  
6、Cookie共享
      在同一个服务器中，不同的项目中怎么进行共享数据
      1、设置cookie的共享数据的访问
      【在同一个服务器中】
       setPath(String path);
      在默认的情况下，设置当前的虚拟目录
             如需要进行共享数据，则就是将path设置/  
         代码:
           //设置Cookie'
		Cookie  cooke=  new Cookie("name","admin");
		cooke.setPath("/");
		response.addCookie(cooke);
       
        【在不同的服务器中】    
       怎么进行共享cookie
         	cooke.setDomain(domain);
         	如在同一级域名中，那么多个服务器程序之间的cookie是可以进行共享的
         	cooke.setDomain(.baidu.com);
         	 在一级域名中就可以进行共享数据了
         	 如：
         	 https://baike.baidu.com/ 与  https://tieba.baidu.com/
7、Cookie的特点和作用
    1、cookie存储数据在客户端【浏览器】
    2、对于单个cookie的大小有限制【4kb】
    3、对同一个域名下的总Cookie数据也有限制【20个】
   7-1、有什么用
	      1.一般存储少量的数据并且还是敏感数据
	      2.保存上次登录时间
	      3.在不登录的情况下，完成服务器中对客户端的身份识别
	      4......
8、案列：         保存上次登录时间
      		//设置消息头以及编码的格式
		response.setContentType("text/html;charset=UTF-8");
		   //1.获取Cookie值
		Cookie []  cookies=request.getCookies();
		  boolean boo=false;
		  
		      //2.进行遍历cookies
		  /**
		   * 当不是一次访问的时候
		   */
		  if(cookies!=null && cookies.length>0) {
			  
			  for (Cookie cookie : cookies) {
				//3.获取Cookie中的名称
				String name=  cookie.getName(); 
			        //进行判断是否在cookie存在了某个cookie的name：【lastDate】
			    	if("lastDate".equals(name)) {
			    		//如存在cookie  。那么就不是第一访问的
			    		boo=true;
			    		//设置Cookie的value
			    		  //获取时间
			    		Date  date=new Date();
			    		  //格式化时间
			    		SimpleDateFormat  sdf=  new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
			    		String string_date=sdf.format(date);
			    		//转码
			    		string_date=URLEncoder.encode(string_date,"utf-8");
			    	
			    	
			    		
			    		//获取Cookie中value
			    	String value=	cookie.getValue();
			    		
			    		//找进行解码
			     	value=	URLDecoder.decode(value,"utf-8");
			     	
				    	//设置第二次访问的时间
			    		cookie.setValue(string_date);
			    		//设置cookie存活的时间
			    		cookie.setMaxAge(60*60*24*30);
			    	  //返回Cookie
		    		    response.addCookie(cookie);
			    		response.getWriter().write("<H4>亲，上次访问等的时间"+value+"</H4>");
			    	}
			  
			  }
		  }
		  
		  /**
		   * 当第一次访问的时候
		   * */
		  if(cookies==null  || cookies.length== 0 || boo==false) {
			    //设置Cookie中values
			       //获取时间
			  Date  date=  new Date();
			  //格式化时间
	    		SimpleDateFormat  sdf=  new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
	    		String string_date=sdf.format(date);
	    		//转码
	    		string_date=URLEncoder.encode(string_date, "utf-8");
	    		 //创建Cookie
	    		Cookie  cook=new Cookie("lastDate",string_date);
	    		//设置cookie存活的时间
	    		cook.setMaxAge(60*60*24*30);
	    		//返回Cookie
	    		response.addCookie(cook);
	    		   //返回到页面
	    		response.getWriter().write("<H4>亲，欢迎第一次登陆这里</H4>");	
		  
		  }
 
9、Seesion
        Session 【在服务端会话】      
      1、Session就服务端的会话技术，【在一次会话的多次请求间进行共享数据】
      
      2.就是将数据保存在服务器端的对象中
      3.入门
            		创建Session
            		   1.获取HttpSession对象
            		      HttpSession session=   request.getSession()      
      					2.常用的方法
      						//Session中的方法
      						//设置Session中的值
							session.setAttribute("", "");
							 //获取Session中的值
							session.getAttribute("");
							//删除Session中的值
							session.removeAttribute("");
         				如设置Session
         				   		//获取Session对象
								HttpSession session=	request.getSession();
								session.setAttribute("seesion","admin");
		4.Session的原理
		   Session的实现依赖于Cookie的如(原理图)
		   
		5.扩展
		     当客户端【关闭】，服务器不进行关闭，两次获取的Session是不是同一个Seesion
		        默认的情况下，(不是)  
		       5-1如有的情况下，需要相同.
		                5-1-2可进行  创建Cookie,的键为JSESSIONID,设置最大存活时间，让Cookie持久化保存    
		                下节课来写代码
             
   




  