连接池
    1、 描述:连接池，就一 个容器(集合),存放数据库连接的容器
          	当系统初始化好后，容器就会进行创建，容器会进行申请连接对象，当用户(程序员)访问数据库的时候
    		,就会从容器中获取连接对象,用户使用完毕之后,会将这个连接的对象归还给容器
    2、好处
       	节约资源，用户的访问效率高，减少给数据库的资源不断的获取和不断关闭
    3、常见的连接池
       C3P0
       Druid
C3P0连接池
     1、 导入对应的jar包和数据库的驱动包
     2、在src目录下创建一xml文件(c3p0-config.xml)
     3、 c3p0-config.xml信息如下:
					      	<?xml version="1.0" encoding="UTF-8"?>
					<c3p0-config>    
					        <default-config>    
					            <property name="jdbcUrl">jdbc:mysql://localhost:3306/mydb</property>    <!-- jdbc协议地址 -->
					            <property name="driverClass">com.mysql.jdbc.Driver</property>             <!-- 驱动 -->
					            <property name="user">root</property>                                     <!-- 数据库的用户名  -->
					            <property name="password"></property>                                     <!-- 数据库密码 ，若没有密码，该项可省略 -->
					        
					      <!--***** *************************以下property 配置可不写， 有默认值***************************************** -->
					      
					   <property name="initialPoolSize">10</property>                    <!-- 初始化时的链接数量 -->
					    <property name="maxPoolSize">100</property>                        <!-- 最大链接数量 -->
					     <property name="minPoolSize">10</property>                        <!-- 最小链接数量  -->
					            
					            <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->    
					    <property name="acquireIncrement">3</property>    
					      
					    <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->    
					    <property name="acquireRetryAttempts">30</property>    
					      
					    <!--两次连接中间隔时间，单位毫秒。Default: 1000 -->    
					    <property name="acquireRetryDelay">1000</property>    
					      
					    <!--连接关闭时默认将所有未提交的操作回滚。Default: false -->    
					    <property name="autoCommitOnClose">false</property>    
					      
					    <!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么    
					    属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试    
					    使用。Default: null-->    
					    <property name="automaticTestTable">Test</property>    
					      
					    <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效    
					    保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试    
					    获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->    
					    <property name="breakAfterAcquireFailure">false</property>    
					      
					    <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出    
					    SQLException,如设为0则无限期等待。单位毫秒。Default: 0 -->    
					    <property name="checkoutTimeout">100</property>    
					      
					    <!--通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。    
					    Default: com.mchange.v2.c3p0.impl.DefaultConnectionTester-->    
					    <property name="connectionTesterClassName"></property>    
					      
					    <!--指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可    
					    Default: null-->    
					    <property name="factoryClassLocation">null</property>    
					      
					    <!--Strongly disrecommended. Setting this to true may lead to subtle and bizarre bugs.    
					    （文档原文）作者强烈建议不使用的一个属性-->    
					    <property name="forceIgnoreUnresolvedTransactions">false</property>    
					      
					    <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->    
					    <property name="idleConnectionTestPeriod">60</property>    
					      
					    <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->    
					    <property name="initialPoolSize">3</property>    
					      
					    <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->    
					    <property name="maxIdleTime">60</property>    
					      
					    <!--连接池中保留的最大连接数。Default: 15 -->    
					    <property name="maxPoolSize">15</property>    
					      
					    <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements    
					    属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。    
					    如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->    
					    <property name="maxStatements">100</property>    
					      
					    <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 -->    
					    <property name="maxStatementsPerConnection"></property>    
					      
					    <!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能    
					    通过多线程实现多个操作同时被执行。Default: 3-->    
					    <property name="numHelperThreads">3</property>    
					      
					    <!--当用户调用getConnection()时使root用户成为去获取连接的用户。主要用于连接池连接非c3p0    
					    的数据源时。Default: null-->    
					    <property name="overrideDefaultUser">root</property>    
					      
					    <!--与overrideDefaultUser参数对应使用的一个参数。Default: null-->    
					    <property name="overrideDefaultPassword">password</property>    
					      
					    <!--密码。Default: null-->    
					    <property name="password"></property>    
					      
					    <!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意：    
					    测试的表必须在初始数据源的时候就存在。Default: null-->    
					    <property name="preferredTestQuery">select id from test where id=1</property>    
					      
					    <!--用户修改系统配置参数执行前最多等待300秒。Default: 300 -->    
					    <property name="propertyCycle">300</property>    
					      
					    <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的    
					    时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable    
					    等方法来提升连接测试的性能。Default: false -->    
					    <property name="testConnectionOnCheckout">false</property>    
					      
					    <!--如果设为true那么在取得连接的同时将校验连接的有效性。Default: false -->    
					    <property name="testConnectionOnCheckin">true</property>    
					      
					    <!--用户名。Default: null-->    
					    <property name="user">root</property>    
					      
					    <!--早期的c3p0版本对JDBC接口采用动态反射代理。在早期版本用途广泛的情况下这个参数    
					    允许用户恢复到动态反射代理以解决不稳定的故障。最新的非反射代理更快并且已经开始    
					    广泛的被使用，所以这个参数未必有用。现在原先的动态反射与新的非反射代理同时受到    
					    支持，但今后可能的版本可能不支持动态反射代理。Default: false-->    
					    <property name="usesTraditionalReflectiveProxies">false</property>  
					            
					        </default-config>    
					    </c3p0-config>
       4、测试连接
           4-1/创建连接数据库的对象
             4-2、获取连接的对象
		           	@org.junit.Test
					public void testname() throws Exception {
						//1、创建数据库的连接池对象
						DataSource  data=   new  ComboPooledDataSource();
						//2.获取连接对象
					Connection  conn=	data.getConnection();
					System.out.println(conn);
					}
Druid
     1、导入对应的jar包和数据库的驱动包
     2、在src目录下创建对应的db.properties
     3、db.properties用于编写Druid连接池的数据信息(如  地址，用户，密码)
         		#链接地址
				driverClassName=com.mysql.jdbc.Driver
				#加载驱动
				url=jdbc:mysql://192.168.2.159:3306/testMysql
				#用户
				username=root
				#密码
				password=root
				#初始化连接数量
				initialSize=5
				#最大并发连接数 
				maxActive=10
				#最小空闲连接数 
				minIdle=3
				#配置获取连接等待超时的时间 
				maxWait=60000
				# 打开 removeAbandoned 功能
				removeAbandoned=true
				# 180 秒，
				removeAbandonedTimeout=180
				#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
				timeBetweenEvictionRunsMillis=60000
				# 配置一个连接在池中最小生存的时间，单位是毫秒
				minEvictableIdleTimeMillis=300000
				#用来检测连接是否有效的sql，要求是一个查询语句
				validationQuery=SELECT 1 FROM DUAL
				#申请连接的时候检测
				testWhileIdle=true 
				#申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能
				testOnBorrow=false
				#归还连接时执行validationQuery检测连接是否有效，配置为true会降低性
				testOnReturn=false
				#打开PSCache，并且指定每个连接上PSCache的大小
				poolPreparedStatements=true
				
				maxPoolPreparedStatementPerConnectionSize=50
				#属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                
				#监控统计用的filter:stat
				#日志用的filter:log4j
				#防御SQL注入的filter:wall
				filters=stat
		4、测连接
		   4-1、加载配置文件
		   4-2、获取连接池的对象
		   5-3、获取连接
		   	@org.junit.Test
					public void testname01() throws Exception {
			//1、加载配置文件
				InputStream   input=	
						Test.class.getClassLoader().getResourceAsStream("druid.properties");
						Properties pr=   new Properties();	
						pr.load(input);
						//2、获取连接池的对象
						DataSource date=
								DruidDataSourceFactory.createDataSource(pr);
						//3、获取对应的连接
						Connection  conn=	date.getConnection();
						System.out.println(conn);
					}		         		         
===================================================
Servlet
==============================================
1、什么是Servlet
     Server Applet
      1-1、就是Java Servlet的简称.就是一个小的服务程序或者也可以说成是服务连接器
      1-2、说白了就是使用java代码编写的服务器端的一个程序，具有独立于平台和协议的特性
      1-3、主要的功能就是在与交互浏览器生成数据,从而生成动态的web内容数据
      
     1-4、Servletr入门案列
        1、创建一类并进行实现 Servlet,并	@Override出对应的方法
        2、配置web.xml并进行指定请求的路径地址
        如:
        public class TestServlet01  implements Servlet{
        ......
        }
      		 <!--进行配置请求的地址的信息-->
			  <servlet>
			    <servlet-name>servlet01</servlet-name>
			    <servlet-class>com.servlet.test01.TestServlet01</servlet-class>
			    <!--  
			       进行指定创建时间
			         1、第一次被创建时候，进行创建load-on-startup的值是为负数
			        2、在服务器启动的时候进行创建load-on-startup的值为0或者是整数
			    -->
			    <load-on-startup>1</load-on-startup>
			  </servlet>
			  <servlet-mapping>
			    <servlet-name>servlet01</servlet-name>
			    <!--  /dom01地址-->
			    <url-pattern>/dom01</url-pattern>
			  </servlet-mapping>
      
      
2、Servlet执行的流程
     2-1、层当前启动Servlet的时候会进行执行,servlet中的init(初始化行)
     2-2、当请求路径地址的时候，http://localhost:8080/servlet_01/dom01会进行
        	  执行Servlet中的service方法【只要当前的服务器停止，那这个Service方法,只有只有你请求了N次就会进执行N次
     	 但是,Servlet中的init方法只会在服务启动的时候进行执行一次,      
        	  】
     2-3、当前请求之后，如服务进行关闭停止，那么Servlet中的destroy方法就进行执行
     2-4.init是初始化。    destroy销毁
     2-5.由于写xml的配置文件过于麻烦
        	 就可以使用Servlet3.0版本的注解
         Servlet3.0之后(包含),支持注解的配置
                      如注解:@WebServlet()
   	 2-6.注解配置
     	   @WebServlet("/dom02")
     	    可配置多个地址     
         	@WebServlet({"/dom02","/*dom03"})	              
 
 
 3、HTTP请求(扩展)
     1、超文本传输协议
     2、定义，客户端/服务端之间的通信,发生数据的格式是什么样
      特点:
         默认端口80
         是基于请求和响应的模型:一次请求对应一次响应
    	无状态的，每次请求之间相互独立，不能进行交互数据      
                          
4.请求的消息格式
      4-1 、请求行
        	格式:  GET  /XXX.html  HTTP/1.1
        	HTTP请求的方式有7种请求方式，常用的方式2种
        	  4-1-1、GET
        	     如请求:http://localhost:8080/servlet_01/dom02
        	     -1.请求的参数在请求行中，说白就是在url中
        	     -2.请求的长度有限制
        	     -3.不安全
        	  4-1-2、Post
        	      -1.请求的参数在请求体中
        	      -2.请求的长度没有限制
        	      -3.比get要安全
				<from Method="post"....
      4-2、请求头
      		Host: localhost:8080
			User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:68.0) Gecko/20100101 Firefox/68.0
			Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
			Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
			Accept-Encoding: gzip, deflate
			Connection: keep-alive
			Upgrade-Insecure-Requests: 1
      4-3、请求空行 
                   空行,就是用于分割Post请求的请求头和请求体
      4-4、请求体(主菜)  
     	    封装Post请求消息的请求参数的 
请求和响应 是什么?




1、请求    ServletRequest
   Request
    Request和 response 的对象是由服务器创建的,程序员可以进行直接的使用
    Request对象就是获取请求的消息
    response  对象就是设置响应的消息
		    如Request是容器给我传的
		      源码:
		      public class RequestFacade implements HttpServletRequest {
		    // ----------------------------------------------------------- DoPrivileged
		    private final class GetAttributePrivilegedAction
		            implements PrivilegedAction<Enumeration<String>> {
     
    	 Request执行的流程,有了请求就是响应
    	      
     
     
     
     
     
2、响应  ServletResponse
    response
    
           
      
      
      
      
      
      
      
      
      
          


         
       
                