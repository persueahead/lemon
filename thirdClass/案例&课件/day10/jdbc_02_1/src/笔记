JDBC的入门
 1、增删改
  			/**
			 * 修改数据
			 * @throws Exception
			 */
			@Test
			public void testName03() throws Exception {
				//加载驱动
				 Class.forName("com.mysql.jdbc.Driver");
				 //获取连接的对象
				 Connection  conn= DriverManager.getConnection("jdbc:mysql://192.168.2.159:3306/testMysql?characterEncoding=utf-8","root","root");
				 System.out.println(conn);
				 
				 String  sql="delete from person where pid=1 ";
				 //执行对应的sql语句
				 
				 Statement   stmt= conn.createStatement();
			  int  i=	 stmt.executeUpdate(sql);
			 System.out.println(i);
			 stmt.close();
			 conn.close();
			}
			/**
			 * 修改数据
			 * @throws Exception
			 */
			@Test
			public void testName02() throws Exception {
				//加载驱动
				 Class.forName("com.mysql.jdbc.Driver");
				 //获取连接的对象
				 Connection  conn= DriverManager.getConnection("jdbc:mysql://192.168.2.159:3306/testMysql?characterEncoding=utf-8","root","root");
				 System.out.println(conn);
				 
				 String  sql="update  person  set pname='小李' WHERE pid=1";
				 //执行对应的sql语句
				 
				 Statement   stmt= conn.createStatement();
			  int  i=	 stmt.executeUpdate(sql);
			 System.out.println(i);
			 stmt.close();
			 conn.close();
			}
			
			
			
			/**
			 * 添加数据
			 * @throws Exception
			 */
			@Test
			public void testName01() throws Exception {
				//加载驱动
				 Class.forName("com.mysql.jdbc.Driver");
				 //获取连接的对象
				 Connection  conn= DriverManager.getConnection("jdbc:mysql://192.168.2.159:3306/testMysql?characterEncoding=utf-8","root","root");
				 System.out.println(conn);
				 
				 String  sql="insert  into person(pname,page) VALUES ('小张',12)";
				 //执行对应的sql语句
				 
				 Statement   stmt= conn.createStatement();
			  int  i=	 stmt.executeUpdate(sql);
			 System.out.println(i);
			 stmt.close();
			 conn.close();
			}
2、查询  
	从数据库中进行吧数据查询处理，然后在进行对结果集的遍历得到每一条数据，
	然后在进行封装成一对象
	2-1、 ResultSet	
	 表示数据库结果集的数据表，通常通过执行查询数据库的语句生成。 
		next()        将光标从当前位置向前移一行。
		getxxxx() 标识通过字段名，所谓的就是参数的类型返回相同的类型的值
		           通过列名，参数是整数的，并且是从1开始的,      
		
	2-2、查询单条数据
	  		public void testName01() throws Exception {
		//加载驱动
		 Class.forName("com.mysql.jdbc.Driver");
		 //获取连接的对象
		 Connection  conn= DriverManager.getConnection("jdbc:mysql://192.168.2.159:3306/testMysql?characterEncoding=utf-8","root","root");
		 System.out.println(conn);
		 String  sql="select * from person where pid=2 ";
		 //执行对应的sql语句
		 Statement  stat= conn.createStatement();
		 ResultSet  set=	 stat.executeQuery(sql);
		 	set.next();
		 	int  in=	set.getInt(1);
		 	String  name=	set.getString(2);
		 	int  age=	set.getInt(3);
		 	System.out.println(in+","+name+","+age);
		 	set.close();
		 	stat.close();
		 	conn.close();
			} 
		2-3、查询多条数据
				String  sql="select * from person ";
				 //执行对应的sql语句
				 Statement  stat= conn.createStatement();
				 ResultSet  set=	 stat.executeQuery(sql);
				 	  while(set.next()) {
				 		 int  in=	set.getInt(1);
						 	String  name=	set.getString(2);
						 	int  age=	set.getInt(3);
						 	System.out.println(in+","+name+","+age);
				 	  }	
		2-4、查询多条数据进行封装成对象
				方式一:
					 String  sql="select * from person ";
					 //执行对应的sql语句
					 Statement  stat= conn.createStatement();
					 ResultSet  set=	 stat.executeQuery(sql);
					List list= new ArrayList<Person>();
					 	  while(set.next()) {
					 		 Person  per=  new  Person();
					 		per.setPid(set.getInt(1));
					 		per.setPname(set.getString(2));
							per.setPage(set.getInt(3));
							list.add(per);
					 	  }
					 System.out.println(list);
		 		方式二:
				 		String  sql="select * from person ";
						 //执行对应的sql语句
						 Statement  stat= conn.createStatement();
						 ResultSet  set=	 stat.executeQuery(sql);
						List list= new ArrayList<Person>();
						 	  while(set.next()) {
						 		 Person  per=  new  Person();
						 		per.setPid(set.getInt("pid"));
						 		per.setPname(set.getString("pname"));
								per.setPage(set.getInt("page"));
								list.add(per);
						 	  }
						 System.out.println(list);
3、JDBC的工具类的提取
    3-1、创建加载数据资源文件
    		  在SRC目录下创建jdbc.properties
	        	jdbc_driver=com.mysql.jdbc.Driver
			jdbc_url=jdbc:mysql://192.168.2.159:3306/testMysql?characterEncoding=utf-8
			jdbc_user=root
			jdbc_pwd=root
	3-2、获取数据并进行加驱动
	  		private  static String jdbc_driver;
			private  static String jdbc_url;
			private  static String jdbc_user;
			private  static String jdbc_pwd;
	//文件的读取,并进行加载驱动
		static {
		   //读取文件并获取到值
		Properties  per=    new Properties();
		//获取类加载器
		ClassLoader  classLoader=	JDBCUtils.class.getClassLoader();
		URL  re=	classLoader.getResource("jdbc.properties");
		String path=	re.getPath();
		try {
			per.load(new  FileReader(path));
			//获取对应的数据
			jdbc_driver=per.getProperty("jdbc_driver"); 
			jdbc_url=	per.getProperty("jdbc_url"); 
			jdbc_user=per.getProperty("jdbc_user"); 
			jdbc_pwd=per.getProperty("jdbc_pwd"); 
			//加载驱动
			Class.forName(jdbc_driver);
			}	     
    3-3、获取数据连接信息的对象
       			public static Connection getConnection() throws Exception {
					Connection  conn=	DriverManager.getConnection(jdbc_url, jdbc_user, jdbc_pwd);
					return  conn;
				}	
    3-4、关闭资源
    		public void getClose(Connection conn,ResultSet set,Statement stat) throws Exception {
				if(stat !=null) {
					stat.close();
				}
				if(set !=null) {
					stat.close();
				}
				if(conn !=null) {
					stat.close();
				}
			}
    
4、SQL注入
      由于字符串拼接容易产生SQL的注入的问题，那么这个时候预编译就出来了，接口 PreparedStatement
    拼接的sql不建议使用，
      如
       String  sql="select * from person where page="+page+" and  pname="+pname;
       select * from person where page=1222  and   pname='小张'  or  1=1   -- sql注入的问题
5、接口 PreparedStatement
		表示预编译的 SQL 语句的对象。 
		SQL 语句被预编译并存储在 PreparedStatement 对象中。然后可以使用此对象多次高效地执行该语句
		需要占位符?来进行代替
		这就可以进行防治SQL注入的问题了
		5-1常见的方法:
	      executeQuery() ---执行查询
	      executeUpdate() ---执行增删改
          setXXXX()-- 将指定参数设置为给定 Java 的值
          PreparedStatement prepareStatement(String sql)	--将参数化的 SQL 语句发送到数据库
6、       PreparedStatement执行案例   
          		继承了Statement
         	 @Test
			public void testName05() throws Exception {
				Connection  conn =JDBCUtils.getConnection();
				 String  sql="select * from person where page=? and  pname= ? ";
				 PreparedStatement per= conn.prepareStatement(sql);
				 per.setInt(1,12);
				 per.setString(2,"小张");
				 ResultSet  set= per.executeQuery();//执行查询返回结果集
				 List array= new  ArrayList<Person>();
				 while(set.next()) {
					 Person  person= new Person();
					 person.setPid(set.getInt("pid"));
					 person.setPage(set.getInt("page"));
					 person.setPname(set.getString("pname"));
					 array.add(person);
				 }
				 System.out.println(array);
				 JDBCUtils.getClose(conn, set,null,per); 
			}
          	
          	//添加 删除  修改都是一样的操作只是sql不一样	
          @Test
			public void testName06() throws Exception {
				Connection  conn =JDBCUtils.getConnection();
				 //String  sql="update  person  set pname=? WHERE pid=? and XXXX ";
				//添加 删除  修改都是一样的操作只是sql不一样
				String  sql="update  person  set pname=? WHERE pid=? ";
				 PreparedStatement per= conn.prepareStatement(sql);
				 per.setString(1,"小张");
				 per.setInt(2,4);
				 int  i= per.executeUpdate();
				 System.out.println(i);
				 JDBCUtils.getClose(conn, null,null,per); 
			}
        6-1、使用预编译的好处
	        1、会先把SQL进行发送到数据库进行预编译
	        2、会进行引用着预编译的结果
	        3、可多次的存入不同的参数给预编译的对象并执行
	        4、减少了SQL的编译次数，提高了效率
	        5、没有sql的注入了，并且提高了可读性

7、事务
        要么一起成功要么一起失败
     	   如果多条数据其中的一条数据失败了，其他数据没有失败,那么就发生回滚不让其他数据进行添加
  7-1、四大特性(***)
      	  原子性   隔离型  持久性 一致性
      	 7-1-1、 原子性 
	      	      表将事务总共所有的操作捆包为一个不可分离的单元(如鸳鸯)
	      	     ，即使对事务进行的数据修改等操作，要么全部执行，要么全部失败
      	  7-1-2、 隔离型
      	  	一个事务执行的时候不能被其他的事务进行干扰(一对情侣【事务】不能有第三者)
      	  	，也就是说一个事务内部的操作以及使用的数据对并发的其他的事务是隔离
      	  	并发执行的每个事务之间是不能进行相互干扰的
      	  7-1-3、 持久性(永久性)
	      	      一旦事务提交了，对数据库中的数据的改变就是永久的(你的儿子始终是你儿子【永久】)
	      	    提交数据之后，其他的操作如(故障)都不会对数据有任何的影响   
      	 7-1-4、  一致性(要保证相同的数据)
      	    	 标识事务完成时，必须使所有的数据保证一致的状态       
  7-2、事务并发(在不考虑到隔离级别)了解
  	    1、脏读
     		     一事务读取到另外一个事务未提交的数据
	   	2、不可重复读
	   		 一个事务读取到了，另外一事务已经提交的修改数据,导致在同一个事务中的多次提交 的结果是不一样的
	   	3、幻读|虚读    
	                 一个事务读取到了另外一个事务已经提交的添加数据,导致在同一个事务中的多次 的结果是不一样的
  7-3、事务的隔离级别 (了解)
   	   1、未提交读
                                 所有的事务都可以看到没有提交的事务的数据
            	  会出现脏读          不可重复读      幻读|虚读         
	   2、读已提交
	      	  事务成功提交后，才可以被查询的到
	      	    会出现          不可重复读      幻读|虚读        
	   3、重复读
	       	  同一个事务多次读取数据的时候，可能会将未提交的数据进行查询处理，从而出现幻读|虚读 
	       	 mysql 默认级别(注意)   
	       	 	会出现         幻读|虚读        
	   4、串行化
        	说白就是一条一条的搞，
8、事务案例转账
    		try {
			//默认的提交自动提交，修改成手动提交
			conn=JDBCUtils.getConnection();
			//autoCommit - 为 true 表示启用自动提交模式；为 false 表示禁用自动提交模式 
				conn.setAutoCommit(false);
				//写逻辑
				String  sql1="update person  set monery= monery-? where pid=? ";
				String  sql2="update person  set monery= monery+? where pid=? ";
				pr1=conn.prepareStatement(sql1);	
				pr2=conn.prepareStatement(sql2);	
					//设置参数
				pr1.setInt(1,1000);
				pr1.setInt(2,2);
				//设置参数
				pr2.setInt(1,1000);
				pr2.setInt(2,3);
				pr1.executeUpdate();
						int i=1/0;
						System.out.println(i);
				pr2.executeUpdate();
				//进行提交数据
				conn.commit();
				//将提交数据的方式设置回去
				conn.setAutoCommit(true);
				pr1.close();
				pr2.close();
				conn.close();
		} catch (Exception e) {
			//如提交的数据失败了进行回滚
			conn.rollback();
			e.printStackTrace();
		}      	 	           	  
9、连接池
   	说白了就是一个容器【集合】,用来存放数据连接【数据库链接的资源】的容器	   
   	         	  	               
      
                           
      