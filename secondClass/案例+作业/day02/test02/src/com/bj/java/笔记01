自定义异常
1、什么是自定义异常(描述自定义异常)
    1-1.在工作中java提供的异常无法进行满足(提示用户的信息,如
      密码不正确,不能为空.....)需要的时候就需要进行自定义异常
 	1-2.java提供的异常信息中是不能进行显示给用户中文的，显示的英文
 			如用户看不懂
 				
 				public static void main(String[] args) {
						int i=1/0;
						System.err.println();
					}
   
   1-3.规则
   		1-3-1 用户自定义的异常类需要进行继承RuntimeException
   		1-3-2 自定义的这个异常必须进行写构造函数
   				案列展示：
   		 		public class TestJava03 extends RuntimeException{
						public TestJava03() {
							super();
							// TODO Auto-generated constructor stub
						}
						public TestJava03(String message, Throwable cause) {
							super(message, cause);
							// TODO Auto-generated constructor stub
						}
						public TestJava03(String message) {
							super(message);
							// TODO Auto-generated constructor stub
						}
					}   
		1-3-3 自定义异常要将自定义异常类的名称见名如意,并且	自定义异常类的后缀加上RuntimeException		
				案列展示：
					public  void  getTest(int  i){
							if(i==0) {
								//进行生命自定义异常
								//在这里传入的参数就是给用展示/提示用户的信息
								throw new MyThisRuntimeException("除数不能为0");
							}else {
								System.out.println(i+"可以当成除数");
								System.out.println(i/i);
								}
							}
					public static void main(String[] args) {
								try {
									new TestJava2().getTest(0);
								} catch (Exception e) {
								String i=e.getMessage();
								System.out.println(i);
								}
							}			
   		 	1-3-4  自定义异常的细节
   		 	     自定义的类继承异常类(RuntimeException)需要进行需要有构造函数
   		 	     但是  该构造函数必须要有super()调用父类,如有提示用户的提示异常信息(构造函数中的参数)
   		 	     将该参数放入super中用于调用父类的构造函数
   			  继承只能单继承
   			1-3-5 Throwable
   			 		   是error和Exception的父类
			
			1-3-6 RuntimeException与Exception区别
					RuntimeException
						RuntimeException 是那些可能在 Java 
						虚拟机正常运行期间抛出的异常的超类。 
						可能在执行方法期间抛出但未被捕获的 RuntimeException 
						的任何子类都无需在 throws 子句中进行声明。 
		
					Exception 
						类及其子类是 Throwable 的一种形式，
						它指出了合理的应用程序想要捕获的条件
				描述:	
					自定义的异常,不用进行抛出获取捕获,那么程序进行处理这个异常	


2、throws与throw之间的区别
		2-1:throws
				用在方法生明的后面()小括号后面,跟着异常的类名
				注意的是:
					可以跟随多个异常的类名,使用逗号进行
					 如:
					 	public static  void getTest01() throws ParseException,IllegalAccessException  ....
					表示抛出的异常是由该方法的调用者来进行处理该异常 	
		2-2： throw
			  是用在方法体内，异常的对象名
			 只能进行抛出该异常类型的异常(包含子类的异常类型)
			 不用进行try  或  在方法体上进行抛出异常
			  


3、断言-案例
     3-1 ：  自定义异常,使用在哪个地方，
             可以节约代码的使用量
             更加便于 阅读，维护
     ·方便使用自定义中文信息提示给用户        
     	代码的重复使用性(而不是硬编码的方法)
	案列:
			//获取自定义异常的方法
			  public  static  void  getMyThisRuntimeException(String message)throws  MyThisRuntimeException {
				  throw  new MyThisRuntimeException(message);
			  }
			  
			  
			  //判断某个字符串不能为空
			  //message  表示的是提示用的异常信息
			  //ages  需要进行断言(判断)某个字符串(数字...)
			  public  static  void  getIsNotNull(String message,String ages)throws MyThisRuntimeException {
				  if(ages==null || ages=="") {
					  	getMyThisRuntimeException(message);
				  }
			  }	
			
			====调用
					public  void getSerivce(String name)throws MyThisRuntimeException {
						getIsNotNull("用户名称不能为空", name);
					}
			



4、总结，异常的注意事项
		1.就是我们在处理异常的时候捕获/抛出
		2.在工作尽量使用抛出.便于异常的查询
			除了不进行抛出就可以使用捕获
		3.Exception和Error的父类Throwable类
		4.自定义的使用,在自定义异常的类里面要有构造函数，
			并且该构造函数必须要有super()调用父类,
			如有提示用户的提示异常信息(构造函数中的参数)
   		 	 将该参数放入super中用于调用父类的构造函数
		5.throws 可以跟随多个异常的类名,使用逗号进行
		6.工作中使用异常大部分使用的一般异常
			除了特殊的情况下使用运行时的异常		
		7.自定义异常的使用方式
		
		
		
		
  