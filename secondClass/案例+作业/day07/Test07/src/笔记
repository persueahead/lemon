1。对象流
	1-1./什么是对象流
		用于读写对象的处理流
			 ObjectOutputStream
			 ObjectInputStream	
	 就是可以将java的对象写入到数据源中。也能把对象从数据源中进行还原
2、案列:
		public class Users implements Serializable {
			private static final long serialVersionUID = 1L;
			....
	  对象流
	  	//对象流反序列化
				public static void getVoid01() throws FileNotFoundException, IOException, ClassNotFoundException {
					System.out.println("----------------------");
				     //读取数据
					ObjectInputStream  ois=new ObjectInputStream(new FileInputStream("E:\\IO\\111.txt"));
					Users  u=(Users) ois.readObject();
					System.out.println(u);  
				}
				//对象流序列化
				public static void getVoid() throws FileNotFoundException, IOException, ClassNotFoundException {
					ObjectOutputStream oos=  new ObjectOutputStream(new FileOutputStream("E:\\IO\\111.txt"));
					Users us=  new Users("小张",22);
					oos.writeObject(us);
					oos.flush();
					oos.close();
				}
3/机制：
	 自动的有可能会导致不兼容的问题,不要自动，进行手动添加serialVersionUID
  	3-1/什么是对象序列化机制
	   		内存中的java对象转换成与平台无关的二进制流，从而允许吧这样的而进制流持久的保存在磁盘中
   			 也也可进行通过网络的方式，将这种二进制流传输到某个网络上的节点
	    	 如其他程序需要获取这种二进制流的就需要进行恢复成原来的java对象(反序列化)
	     
	3-2/好处: 
		可以将任何实现了的 Serializable接口的对象进行转化为字节数据.在保存和传输中可以被还原
		 如某个对象支持序列化的机制就必须进行实现Serializable接口
			只要实现了Serializable接口的类,都有一个静态变量(版本表示符)
				  用来表明类的不同的版本(兼容性)
	3-3 注意:
		    如果某个类中的字段不基本数据类型或者String类型,而是另外的一个引用的类型,
		   那么这个引用类型就需要进行完成可序列化
		  或者拥有该类型的Final的类
		  ,不然不能进行虚拟化的.
		    
	    
	    
	    
	    
	    
	    
	    				
						 