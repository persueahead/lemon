AOP
1.什么是AOP
     1.aop就是面向切面的编程
        通过预编译的方式和运行期动态代理的实现，程序功能的统一维护的一种技术
     2.利用aop可以对业务的逻辑的各个部分进行隔离
        从而使得业务逻辑各部分之间的(耦合度降低)
        提报程序代码的可以重用性，同时也提高了开发的效率
     3.横向重复，纵向抽取
  为什么要学AOP
     1.对程序进行了增强
        不用进行修改源码的情况下，
        aop可以进行我们如 权限验证，事务管理.....
     2.spring给我们生产动态的代理对象

2.动态代理(优先),必要要有对应的接口
   1.被代理对象必须实现接口。才能产出代理对象
     如果没有接口，那么将不能使用动态代理的技术
   2.回顾之前讲解的动态代理(反射)
        1.接口
          public interface IStudentSerivce {
              void  save()throws   Exception;
              void  del()throws  Exception;
          }
        2.实现类
          public class StudentSerivceImp implements IStudentSerivce {
              @Override
              public void save() throws Exception {
                  //数据验证.方法
                  System.out.println("我执行了,添加的方法");
                  //进行调用对应的日志方法
              }
              @Override
              public void del() throws Exception {
                   //数据验证.方法
                  System.out.println("我运行了，删除的方法------");
                  //进行调用对应的日志方法
              }
          }
        3.代理工厂
            //进行创建动态代理的
            public class StudentSerivceProxyFactory implements InvocationHandler {
                private  IStudentSerivce  iStudentSerivce;
                public  IStudentSerivce getIStudentSerivcePorxyFactory(){
                        IStudentSerivce  iStudentSerivce=(IStudentSerivce) Proxy.newProxyInstance(
                                StudentSerivceProxyFactory.class.getClassLoader(),
                                StudentSerivceImp.class.getInterfaces(),this);
                        return iStudentSerivce;
                    }
                    @Override
                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                        //执行数据验证
                        System.out.println("=====---执行数据验证");
                        Object invoke = method.invoke(iStudentSerivce, args);
                        //进行执行日志的方法
                        System.out.println("进行执行日志的方法------------------");

```java
                    return invoke;
                }

    4.测试
            @Test
             public   void test() throws Exception {
                 //获取接口对象
                 IStudentSerivce  iStudentSerivce=new StudentSerivceImp();
                 //获取动态代理的工厂对象
                 StudentSerivceProxyFactory  proxy=new StudentSerivceProxyFactory(iStudentSerivce);
                 //获取动态代理的对象
                 IStudentSerivce  iStudentSerivce1=   proxy.getIStudentSerivcePorxyFactory();
                 iStudentSerivce1.del();
                 iStudentSerivce1.save();
             }
```
3.Cglib代理(没有接口)
   1.第三方技术，Cglib代理可以对任何列生成代理,代理的原理是对目标对象进行继承代理,
   2.如果目标对象，被final修饰了,那么该类似无法被cglib代理的
   3.Cglib代理

   4.接口
               public interface IStudentSerivce {
                   void  save()throws   Exception;
                   void  del()throws  Exception;
               }
   5.实现类
               public class StudentSerivceImp implements IStudentSerivce {
                   @Override
                   public void save() throws Exception {
                       //数据验证.方法
                       System.out.println("我执行了,添加的方法");
                       //进行调用对应的日志方法
                   }
                   @Override
                   public void del() throws Exception {
                        //数据验证.方法
                       System.out.println("我运行了，删除的方法------");
                       //进行调用对应的日志方法
                   }
               }

   6.cglib代理对象
     public class CglibProxyFactory implements MethodInterceptor {
         public  IStudentSerivce  getIStudentSerivceCglib(){
             //创建对象用于生成代理对象
             Enhancer enhancer = new Enhancer();
             //设置给谁进行代理
             enhancer.setSuperclass(StudentSerivceImp.class);
             //代理样进行做什么
             enhancer.setCallback(this);
             IStudentSerivce  iStudentSerivce=(IStudentSerivce)enhancer.create();

```java
         return  iStudentSerivce;
     }
     @Override
     public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
         System.out.println("-------------执行数据验证---------------");

         //调用对应的方法
         Object o1 = methodProxy.invokeSuper(o, objects);

         System.out.println("-----------=-------------进行执行日志的方法--");

         return o1;
     }
 }
```

  7.测试
      @Test
      public   void test001() throws Exception {
          //获取接口对象
          IStudentSerivce  iStudentSerivce=new StudentSerivceImp();
          //获取动态代理的工厂对象
          CglibProxyFactory  cglibProxyFactory=new CglibProxyFactory();

```java
      IStudentSerivce iStudentSerivceCglib = cglibProxyFactory.getIStudentSerivceCglib();
      iStudentSerivceCglib.save();
      iStudentSerivceCglib.del();
  }
```
===================
AOP 相关的术语
     1.连接点 /joinponit
        目标对象分钟所有都是可以进行增强的方法，叫做连接点
     2. 切入点/pointcout
         目标对象,以及增强的方法，叫做切入点
     3.通知(advice)
          1.增加的代理
          2.通知分为以下通知
            |-前置通知
                目标方法运行前进行调用
            |-后置通知
               目标方法运行后进行调用的
            |-异常通知
              目标方法出现异常就会运行的通知
            |-最终通知
               1.无论是否出现异常，那么都会进行执行
               2.目标方法之后进行运行的方法
            |-环绕通知
                  目标方法运行前后进行调用的通知
      4.目标对象 Target
            代理的目标对象(被代理的对象)
      5.织入(weaving)
         将通知应用到切入点的过程
      6。代理(proxy)
          将通知织入到目标对象之后，而形成的代理对象
      7.切面
        切入点和通知的结合

------------------
AOP 配置(xml版
            目标对象
                      1.接口
                                   public interface IStudentSerivce {
                                       void  save()throws   Exception;
                                       void  del()throws  Exception;
                                   }
                      2.实现类
                                   public class StudentSerivceImp implements IStudentSerivce {
                                       @Override
                                       public void save() throws Exception {
                                           //数据验证.方法
                                           System.out.println("我执行了,添加的方法");
                                           //进行调用对应的日志方法
                                       }
                                       @Override
                                       public void del() throws Exception {
                                            //数据验证.方法
                                           System.out.println("我运行了，删除的方法------");
                                           //进行调用对应的日志方法
                                       }
                                   }
                       3.通知
                            public class SpringAdvice {
                                 public  void  getBefore(){
                                     System.out.println("前置通知---");

```java
                             }

                             public  void  getAfter(){
                                 System.out.println("最终通知");
                             }
```


```xml
                             public  Object getAround(ProceedingJoinPoint  pj)throws  Throwable{
                                 System.out.println("环绕通知前----执行方法---------");

                                 Object proceed = pj.proceed();//调用目标方法

                                 System.out.println("环绕通知前后=========----执行方法---------");

                                 return  proceed;
                             }

                             public  void  getExcption(){
                                 System.out.println("异常通知-----");

                             }
                             public  void  getAfterExceptino(){

                                 System.out.println("后置通知");

                             }
                        }
                    4.配置
                          <!--1.注入目标对象-->
                            <bean name="studentSerivceImp" class="com.bj.serivce.imp.StudentSerivceImp"></bean>
                            <!--2。配置通知对象-->
                            <bean name="springAdvice" class="com.bj.serivce.advice.SpringAdvice"></bean>
                            <!--3.进通知织入到目标对象中-->
                            <aop:config>
                                <!--
                                  切入点
                                    public void com.bj.serivce.imp.StudentSerivceImp.save()
                                        void com.bj.serivce.imp.StudentSerivceImp.save()
                                        * com.bj.serivce.imp.StudentSerivceImp.save()
                                         * com.bj.serivce.imp.StudentSerivceImp.*()
                                         * com.bj.serivce.imp.StudentSerivceImp.*(..)
                                         * com.bj.serivce.imp.*SerivceImp.*(..)
                                -->
                                    <aop:pointcut id="pt" expression="execution(  * com.bj.serivce.imp.*SerivceImp.*(..))" />
                                    <aop:aspect ref="springAdvice">
                                        <!--配置对应的通知-->
                                         <aop:before method="getBefore" pointcut-ref="pt" />
                                         <!--后置通知-->
                                         <aop:after-returning method="getAfterExceptino" pointcut-ref="pt" />
                                        <!--环绕通知-->
                                        <aop:around method="getAround" pointcut-ref="pt" />
                                        <!--异常通知
                                          必须要有异常才能执行
                                        -->
                                        <aop:after-throwing method="getExcption" pointcut-ref="pt" />
                                        <!--最终通知-->
                                        <aop:after method="getAfter" pointcut-ref="pt" />
                                    </aop:aspect>
```


```java
                            </aop:config>
                          </beans>
                     5测试:
                            @RunWith(SpringJUnit4ClassRunner.class)
                            @ContextConfiguration("classpath:appliactionContext.xml")
                            public class TestSpringPorxy {
                                @Resource(name = "studentSerivceImp")
                                private  IStudentSerivce  iStudentSerivce;

                                /**
                                 *
                                 */
                                @Test
                                public   void test() throws Exception {
                                    iStudentSerivce.del();
                                   // iStudentSerivce.save();
                                }

                            }
```
AOP 配置(注解版
             1.接口
                    public interface IUsersService {

```java
                      public  void   save()throws  Exception;

                      public  void  del()throws  Exception;

                }
```



```xml
         2.实现类
                public class UsersServiceImp implements IUsersService {
                    @Override
                    public void save() throws Exception {
                        System.out.println("我执行 了添加的方法");

                    }

                    @Override
                    public void del() throws Exception {
                      //  System.out.println(1 / 0);
                        System.out.println("我执行了删除的方法");

                    }
                }

         3.注入对象

                <!--1.注入目标对象-->
                    <bean name="usersServiceImp" class="com.bj.spring.imp.UsersServiceImp"></bean>
                <!--2配置通知对象-->
                 <bean name="springAdvice" class="com.bj.spring.SpringAdvice"></bean>
                <!--3开启注解AOP的配置-->
                <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
```


```java
         4.注解

                    //标识当前类为通知类
                    @Aspect
                    public class SpringAdvice {

                        @Pointcut("execution(  * com.bj.spring.imp.*ServiceImp.*(..))")
                        public   void   pt(){

                        }
```


```java
                        @Before("SpringAdvice.pt()")
                         public  void  getBefore(){
                             System.out.println("前置通知---");

                         }

                         @After("SpringAdvice.pt()")
                         public  void  getAfter(){
                             System.out.println("最终通知");
                         }
```


```java
                         @Around("execution(  * com.bj.spring.imp.*ServiceImp.*(..))")
                         public  Object getAround(ProceedingJoinPoint  pj)throws  Throwable{
                             System.out.println("环绕通知前----执行方法---------");

                             Object proceed = pj.proceed();//调用目标方法

                             System.out.println("环绕通知前后=========----执行方法---------");

                             return  proceed;
                         }

                         @AfterThrowing("execution(  * com.bj.spring.imp.*ServiceImp.*(..))")
                         public  void  getExcption(){
                             System.out.println("异常通知-----");

                         }
                         @AfterReturning("execution(  * com.bj.spring.imp.*ServiceImp.*(..))")
                         public  void  getAfterExceptino(){

                             System.out.println("后置通知");

                         }
                    }
```


```java
         5.测试
                        @RunWith(SpringJUnit4ClassRunner.class)
                        @ContextConfiguration("classpath:appliactionContext.xml")
                        public class TestSpringPorxy {

                            @Resource(name = "usersServiceImp")
                            private  IUsersService  iusersservice;

                            /**
                             *
                             */
                            @Test
                            public   void test() throws Exception {

                                iusersservice.del();
                               // iStudentSerivce.save();
                            }

                        }
```
--------
Spring 那么也可以连接数据库
    JDBCTemplate模版
       需要导入的jar包
                 c3p0-0.9.1.2.jar
                 com.springsource.org.aopalliance-1.0.0.jar
                 com.springsource.org.apache.commons.logging-1.1.1.jar
                 com.springsource.org.apache.log4j-1.2.15.jar
                 com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
                 hamcrest-core-1.3.jar
                 junit-4.12.jar
                 mysql-connector-java-5.1.38.jar
                 spring-aop-5.0.8.RELEASE.jar
                 spring-aspects-5.0.8.RELEASE.jar
                 spring-beans-5.0.8.RELEASE.jar
                 spring-context-5.0.8.RELEASE.jar
                 spring-core-5.0.8.RELEASE.jar
                 spring-expression-5.0.8.RELEASE.jar
                 spring-jdbc-5.0.8.RELEASE.jar
                 spring-test-5.0.8.RELEASE.jar
                 spring-tx-5.0.8.RELEASE.jar
      入门小案例
                    @Test
                    public   void test() throws PropertyVetoException {
                         //1.获取连接池对象
                        ComboPooledDataSource dataSource
                                = new ComboPooledDataSource();
                        dataSource.setDriverClass("com.mysql.jdbc.Driver");
                        dataSource.setJdbcUrl("jdbc:mysql://192.168.116.128:3306/testMysql?useUnicode=true&amp;characterEncoding=utf-8");
                        dataSource.setUser("root");
                        dataSource.setPassword("root");

```java
                    //2.创建连接对象
                    JdbcTemplate jdbcTemplate = new JdbcTemplate();
                    jdbcTemplate.setDataSource(dataSource);
                    System.out.println("---------"+jdbcTemplate);
                    //编写sql
                   String sql="insert into users values(1,'amdin',123)";
                    int update = jdbcTemplate.update(sql);
                    System.out.println(update);
                }
JDBC 模版来完成 相关的API
            核心代码
               public class UsersDaoImp implements IUsersDao {

                   private JdbcTemplate jdbcTemplate;
```



```java
                   @Override
                   public void add(Users users) {
                       String sql="INSERT INTO users values(null,?,?) ";

                       jdbcTemplate.update(sql,users.getName(),users.getMonery());
                   }

                   @Override
                   public void del(Users users) {
                       String sql="delete  from users  where id =? ";
                       jdbcTemplate.update(sql,users.getId());
                   }

                   @Override
                   public void upeate(Users users) {
                       String sql="UPDATE  users SET  NAME =? ,monery=? WHERE  id =? ";
                       jdbcTemplate.update(sql,users.getName(),users.getMonery(),users.getId());
                   }

                   @Override
                   public Users getById(Integer id) {
                       String sql="SELECT * FROM users where id=?";

                       return jdbcTemplate.queryForObject(sql, new RowMapper<Users>() {
                           @Override
                           public Users mapRow(ResultSet resultSet, int i) throws SQLException {
                               Users  user= new Users();
                               user.setId(resultSet.getInt("id"));
                               user.setName(resultSet.getString("name"));
                               user.setMonery(resultSet.getInt("monery"));
                               return user;
                           }
                       });
                   }

                   @Override
                   public int getTotal() {
                       String  sql="select count(*) FROM users";
                       return jdbcTemplate.queryForObject(sql,Integer.class);
                   }

                   @Override
                   public List<Users> getALL() {
                       String sql="SELECT * FROM users";
                       return jdbcTemplate.query(sql, new RowMapper<Users>() {
                           @Override
                           public Users mapRow(ResultSet resultSet, int i) throws SQLException {

                               Users  user= new Users();
                               user.setId(resultSet.getInt("id"));
                               user.setName(resultSet.getString("name"));
                               user.setMonery(resultSet.getInt("monery"));
                               return user;
                           }
                       });
                   }

                   public JdbcTemplate getJdbcTemplate() {
                       return jdbcTemplate;
                   }

                   public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
                       this.jdbcTemplate = jdbcTemplate;
                   }
               }
            5.将dao层类配置到容器中
                <!--1.将连接池配置到容器中-->
                <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
                     <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
                     <property name="jdbcUrl" value="jdbc:mysql://192.168.116.128:3306/testMysql?useUnicode=true&amp;characterEncoding=utf-8" ></property>
                     <property name="user"  value="root"></property>
                    <property name="password" value="root"></property>
                </bean>
                 <!--将JdbcTemplate注入到容器中-->
                <bean name="jdbctemplate" class="org.springframework.jdbc.core.JdbcTemplate">
                    <property name="dataSource" ref="dataSource"></property>
                </bean>

                <!--将UsersDao注入到容器中-->
                <bean name="usersDao" class="com.bj.jdbc.dao.imp.UsersDaoImp">
                    <property name="jdbcTemplate" ref="jdbctemplate"></property>
                </bean>
            6.测试
                @RunWith(SpringJUnit4ClassRunner.class)
                @ContextConfiguration("classpath:appliactionContext.xml")
                public class TestSpringPorxy {

                    @Resource(name = "usersDao")
                    private IUsersDao iusersdao;

                    @Test
                    public   void testSElAll() throws Exception {

                        List<Users> all = iusersdao.getALL();
                        for (Users users : all) {
                            System.out.println(users);
                        }
                    }
                    /**
                     *
                     */
                    @Test
                    public   void test() throws Exception {
                        Users users = new Users();
                        users.setMonery(1234);
                        users.setName("隔壁老陈");
                        iusersdao.add(users);
                       // iStudentSerivce.save();
                    }
                    @Test
                    public   void testUp() throws Exception {
                        Users users = new Users();
                        users.setId(1);
                        users.setMonery(1234);
                        users.setName("隔壁老张");
                        iusersdao.upeate(users);
                        // iStudentSerivce.save();
                    }
                }

          方式二使用JdbcDaoSupport
                    public class UsersDaoImp2  extends JdbcDaoSupport implements IUsersDao {

                       /* private JdbcTemplate jdbcTemplate;*/
```



```java
                        @Override
                        public void add(Users users) {
                            String sql="INSERT INTO users values(null,?,?) ";

                            super.getJdbcTemplate().update(sql,users.getName(),users.getMonery());
                        }

                        @Override
                        public void del(Users users) {
                            String sql="delete  from users  where id =? ";
                            super.getJdbcTemplate().update(sql,users.getId());
                        }
                        。。。。。。。
                   配置文件：
                           <!--1.将连接池配置到容器中-->
                            <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
                                 <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
                                 <property name="jdbcUrl" value="jdbc:mysql://192.168.116.128:3306/testMysql?useUnicode=true&amp;characterEncoding=utf-8" ></property>
                                 <property name="user"  value="root"></property>
                                <property name="password" value="root"></property>
                            </bean>

                            <!--将UsersDao注入到容器中-->
                            <bean name="usersDao" class="com.bj.jdbc.dao.imp.UsersDaoImp2">
                                <property name="dataSource" ref="dataSource"></property>
                            </bean>
                引入外部资源数据
                   1.在Src目录下创建jdbc.properties文件
                        jdbc.driverClass=com.mysql.jdbc.Driver
                        jdbc.jdbcUrl=jdbc:mysql://192.168.116.128:3306/testMysql?characterEncoding=utf-8
                        jdbc.user=root
                         jdbc.password=root
                    2.配置文件的编写
                            <!--指定扫描配置文件-->
                                <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

                                <!--1.将连接池配置到容器中-->
                                 <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
                                      <property name="driverClass" value="${jdbc.driverClass}"></property>
                                      <property name="jdbcUrl" value="${jdbc.jdbcUrl}" ></property>
                                      <property name="user"  value="${jdbc.user}"></property>
                                     <property name="password" value="${jdbc.password}"></property>
                                 </bean>
                                <!--将UsersDao注入到容器中-->
                                <bean name="usersDao" class="com.bj.jdbc.dao.imp.UsersDaoImp2">
                                    <property name="dataSource" ref="dataSource"></property>
                                </bean>
```