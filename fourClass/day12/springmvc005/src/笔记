异常处理
  1.在SpringMVC通过HandlerExceptionResolver接口来进行处理程序的异常
    包括Handler 映射，数据绑定以及目标方法执行时候发送的异常
  2.HandlerExceptionResolver  的实现类
      ExceptionHandlerExceptionResolver
  3.dispatcherServlet 默认装配的HandlerExceptionResolver,在开发中使用
   这个配置<mvc:annotation-driven ></mvc:annotation-driven>
   ，就会自动的加载4个异常处理类
    DefaultHandlerExceptionResolver
    ExceptionHandlerExceptionResolver
    ResponseStatusExceptionResolver
    SimpleMappingExceptionResolver


 ExceptionHandlerExceptionResolver
 1.主要进行处理Hadler 中的@ExceptionHandler 注解定义的方法
 2.@ExceptionHandler 注解定义的方法优先级的问题，
     假如发生的是nullPointerException，但是声明的异常有
     RuntimeException  和 Exception  ，那么此时会根据异常的最近的继承的关系去找
     深度最浅的那个@ExceptionHandler注解的方法
 案列
    controller
           @RequestMapping("/TestController001/test001")
            public   String  test001(@RequestParam("id") int  id){
                System.out.println(20 / id);
                return  "lsit";
            }
    异常处理
               @ExceptionHandler({ArithmeticException.class})
                public ModelAndView test002(Exception  ex){
                    System.out.println(ex);
                    ModelAndView view = new ModelAndView();
                    view.setViewName("error");
                    view.addObject("exception",ex.getMessage());
                    return   view;
                }
            <hr>
              ${exception}
              </body>
      如设置的是当前的Controller请求中的异常处理方式,那么怎么进行设置全局的异常处理
---------------
设置全局异常处理
   1.创建一个全局的异常处理的类

   2.  ExceptionHandlerExceptionResolver内部如找不到@ExceptionHandler 注解的时候，
       那么会进行查询@ControllerAdvice中的@ExceptionHandler注解的方法(异常处理去全局)
@ControllerAdvice
public class ThisArithmeticException {
    @ExceptionHandler({ArithmeticException.class})
    public ModelAndView test002(Exception  ex){
        System.out.println(ex);
        ModelAndView view = new ModelAndView();
        view.setViewName("error");
        view.addObject("exception",ex.getMessage());
        return   view;
    }

}
   如上的一异常处理，都是SpringMVC中的自带的
    那么如如果要进行自定义，怎么处理
 --------------------------
 自定义异常处理
        import org.springframework.web.bind.annotation.ResponseStatus;
        @ResponseStatus(value = HttpStatus.NOT_FOUND,reason = "除数不能为0。。。。。。。。")
        public class MyThisException extends RuntimeException{
            public MyThisException() {
            }

            public MyThisException(String message) {
                super(message);
            }
        }
      Controller
           @RequestMapping("/TestController001/test002")
            public   String  test002(@RequestParam("id") int  id){
               // System.out.println(20 / id);
                if(id==0){
                    throw new MyThisException();
                }
                return  "lsit";
            }



---------------------------------------------
使用配置文件你啊进行自动异常页面 SimpleMappingExceptionResolver
          @Controller
          public class TestController002 {
              @RequestMapping("/TestController002/test")
              public   String   test(@RequestParam ("id") int id){
                  String[]  str=   new String[5];
                  System.out.println(str[id]);
                  return "lsit";
              }
          }
  springmvc.xml文件
        <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">

            <!--配置异常的属性名，默认的情况下是不会生效的-->
            <property name="exceptionAttribute" value="exe"></property>
            <!--异常的映射-->
            <property name="exceptionMappings">
                <props>
                    <!--异常跳转的页面
                      必须是异常类的全类名
                    -->
                     <prop key="java.lang.ArrayIndexOutOfBoundsException">error</prop>
                </props>

            </property>
        </bean>
         <hr>
          ${exception}
          <%--默认获取的信息是exception--%>
          <hr>
          ${exe}
          </body>

====================================================================
回顾
   1.Spring  进行创建对象
         在spring.xml文件中进行注册对应的bean对象
       <bean  name=""  class=""></bean>
        1)
         ClassPathXmlApplicationContext  class= new  ClassPathXmlApplicationContext("xxx.xml");
            class.getBean();
    2.IOC  DI概念
       控制反转和依赖注入
       DI
          set方法注入
          构造函数的组
          属性值的注入
          值类型注入
          引用类型的注入
    3.Bean的配置的解释
               <!--
                    bean 元素,使用元素表示需要spring容器管理获取对象
                      |-name ：给被管理的对象去名称,获取该对象就需要使用个名称
                                          这个名称是非唯一的;可以使用特殊字符(推荐使用name值)
                                           可以用于给bean冥名多个名称,使用逗号/分号/空白字符
                                           3种字符隔开即可
                     |-class:  被管理对象列的相对的路径地址(完整的类名)
                      |-id:  与name属性一样的性质,但是id是唯一的,不能使用特殊字符(不推荐使用)

             -->
              <bean  id="users03" name="users;users2" class="com.bj.pojo.Users"></bean>
    4.3中创建的方式
       空参数构造的创建
             <!--
                          空参构造函数进行创建对象
                        -->
                        <bean   name="users22" class="com.bj.pojo.Users"></bean>
       静态工厂的创建
                                1)创建的一个工厂
                                            public class UsersFactory {
                                                public  static  Users  createUsers
                                                        (){
                                                    System.out.println("我是静态的工厂方法");
                                                    return  new Users();
                                                }
                                            }
                                 2）在配置文件中进行配置
                                             <!--
                                                使用静态的工厂方法
                                                     调用UsersFactory中的createUsers方法来进行创建Users对象，并放入到容器中
                                                  factory-method|-执行工厂类中的方法
                                             -->
                                                <bean name="usersFactory" class="com.bj.pojo.UsersFactory" factory-method="createUsers"></bean>

       实挒工厂的创建
                                  1)创建一个工厂
                                                    public class UsersFactory {
                                                        public    Users  createUsers02
                                                                (){
                                                            System.out.println("我是静态的工厂方法");
                                                            return  new Users();
                                                        }
                                                    }

                                                2)在配置文件中进行配置
                                                         <!--
                                                               使用实例工厂的方式进行创建
                                                            -->
                                                              <bean name="usersFactory03" class="com.bj.pojo.UsersFactory"></bean>
                                                                    <!--
                                                                 使用静态的工厂方法
                                                                      调用UsersFactory中的createUsers方法来进行创建Users对象，并放入到容器中
                                                                   factory-method|-执行工厂类中的方法
                                                                   factory-bean |- 指向UsersFactory的对象名(Beanm名称)
                                                                -->
                                                               <bean name="users003" factory-bean="usersFactory03" factory-method="createUsers02"></bean>

    5.详细的讲解了Bean元素解释
         Scope属性
            scope="":属性
                prototype
                    多列原型，在spring容器中每次都会进行创建一个新的对象、

                ingleton(默认的)
                       单列对象，在spring容器中只会有一个对象
                session(了解)
                         在WEB环境中,对象与Session的生明周期是一致
                request(了解)
                         在WEB环境中,对象与request的生明周期是一致
                         在一般情况下,都是使用默认的
         Bean的生明周期
                         3、创建实体
                         public class Student {
                             private  Integer id;
                             private  String name;
                             public  void  getInit(){
                                 System.out.println("-----我是一个初始化的方法-----");
                             }

                             public  void  getDestroy(){
                                 System.out.println("======我是一个销毁的方法=============");
                             }
                  4、配置
                             <bean name="student"  init-method="getInit" destroy-method="getDestroy"
                                      class="com.bj.pojo.Student"></bean>
         模块化的资源路径的配置
                         <!--
                                可以进行使用Ant-style风格
                                   1.3个通配符
                                      |- ? 匹配任何单个字符
                                      |- * 匹配0个或者任意数量的名称
                                      |- ** 匹配0或者过层的目录
                             -->
                             <import resource="appliactionContext01.xml" />
属性的注入
      引用类型的注入
             <bean name="person" class="com.bj.pojo.Person" >
                <!--
                        就是类似之前的xxx.setId(xx);
                            ame="值"，对应的值是该实体列的属性(get  set)
                                             名称去掉get  set  并且首字母小写
                             value="值" 在传入值的时候，需要类型一致，
                    -->
                         <property name="id" value="1"></property>
                        <property name="name" value="隔壁老陈"></property>
                       </bean>
      值类型
        <!--car对象-->
                <bean name="car" class="com.bj.pojo.Car">
                                  <property name="name" value="法拉利"></property>
                                  <property name="color" value="黄色"></property>
                     </bean>

                   <bean name="person01" class="com.bj.pojo.Person">
                                <property name="id" value="2"></property>
                                <property name="name" value="小姐姐"></property>
                                <!--
                                name =属性名
                                ref=指定配置的bean名称
                                -->
                                <property name="car" ref="car"></property>
                   </bean>
构造函数注入
    <!--构造函数的注入
                              方式一
                            -->
                            <bean name="perosn02" class="com.bj.pojo.Person">
                                <constructor-arg name="id" value="123"></constructor-arg>
                                <constructor-arg name="name" value="小哥哥"></constructor-arg>
                            </bean>
                            <!--构造函数的注入
                              方式二
                            -->
                            <bean name="perosn03" class="com.bj.pojo.Person">
                                <constructor-arg index="0" value="123" ></constructor-arg>
                                <constructor-arg index="1" value="李四"></constructor-arg>
                            </bean>
                            <!--构造函数的注入
                           方式三
                         -->
                            <bean name="perosn04" class="com.bj.pojo.Person">
                                <constructor-arg  value="123"  type="java.lang.Integer"></constructor-arg>
                                <constructor-arg value="王五" type="java.lang.String"></constructor-arg>
                            </bean>
P名称的注入
  <bean name="person06" class="com.bj.pojo.Person" p:id="23" p:name="隔壁老王" p:car-ref="car" ></bean>
SQEL注入
     <bean name="person06" class="com.bj.pojo.Person" p:id="23" p:name="隔壁老王" p:car-ref="car" ></bean>
             <bean name="person07" class="com.bj.pojo.Person">
                 <property name="name" value="#{person06.name}"></property>
                 <property name="id" value="#{123 * 2}"></property>
                 <property name="car" ref="car"></property>
             </bean>
---------------------------------------
复杂类型的注入
   数组
    <bean name="coll02" class="com.bj.pojo.Collection">
                         <property name="obj">
                             <array>
                                 <value>小哥哥</value>
                                 <value>小姐姐</value>
                                 <ref bean="car" />
                             </array>
                         </property>
                    </bean>
   集合(list/set 用法都是一样的,指定标签不一样)
         <bean class="com.bj.pojo.Collection" name="coll03">
                        <property name="list">
                            <!--<set></set> -->
                            <list>
                                <value>隔壁老陈</value>
                                <value>隔壁老王</value>
                                <ref bean="car" />
                            </list>
                        </property>
                    </bean>
   map
             <bean name="coll04" class="com.bj.pojo.Collection">
                          <property name="map" >
                              <map>
                                <entry key="key01" value="小张同学"></entry>
                                <entry key="key02" value="123123"></entry>
                                <entry key="obj" value-ref="car"></entry>
                                 <entry key-ref="car" value="key是一个对象"></entry>
                                 <entry key-ref="car" value="key是一个对象"></entry>
                              </map>
                          </property>
                      </bean>
   properties
      <!--Properties-->
                <bean class="com.bj.pojo.Collection" name="coll05">
                    <property name="pro">
                        <props>
                            <prop key="usersNaem">root</prop>
                            <prop key="driverClass">com.jdbc.mysql.Driver</prop>
                        </props>
                    </property>

                </bean>
   null值注入
           <property name="color" >
                            <null/>
           </property>
------------------
使用注解代替XML文件
        @Component  没有定义具体的含义
        @Controller   控制层
        @Service   业务逻辑层
        @Repoesttory   数据访问层
        @Scope   指定对象的作用域
                        prototype
                         多列原型，在spring容器中每次都会进行创建一个新的对象、
                        ingleton(默认的)
                               单列对象，在spring容器中只会有一个对象
                        session(了解)
                                 在WEB环境中,对象与Session的生明周期是一致
                        request(了解)
                                 在WEB环境中,对象与request的生明周期是一致
                                 在一般情况下,都是使用默认的
        @Value  属性的注入
          方法和成员变量都可使用
       @Value(${})可以使用EL表达式
       @Value(#{}) 可以使用SQLEL表达式
       @Autoeired（"对象名称"） 引用类型注入
       @Quqailfier  进行指定名称
       JSR250注解
       @Resource 类似于@Autoeired
       JSR303
       ---
       销毁和初始化注解
       @PostConstrust
       @PreDestroy
  ---------------------
  Bean对象的延迟创建
    全局
      default-lazy-init=""
    局部
        lazy-init=“”

    -----------------------
    自动注入
      全局
         default-autowire
      局部
         autowire
                byName
                byType
                Constructor
         自动注入和手注入的混合使用
           先进行自动注入，在进行手动注入
                  手动注入的值会进行覆盖自动注入的值

        后选者
          全局
              default-autowire-candidates=""
          局部
             autowire-candidates=""


--------------------------
Spirng整合JUNIT
        @RunWith(SpringJUnit4ClassRunner.class)
                  @ContextConfiguration("classpath:appliactionContext.xml")//加载配置文件
                  public class TestSpring04 {

                      @Resource(name="users")
                      private Users users;

                      @Test
                      public   void test(){
                          users.testUsers();
                      }
                  }


---------------------------
AOP的铺垫
    动态代理
       被代理的对象必须要进行实现对应的接口，才能生产出对应的代理对象，如没有接口那么就不进行使用动态代理的技术
       //进行创建动态代理的
                   public class StudentSerivceProxyFactory implements InvocationHandler {
                       private  IStudentSerivce  iStudentSerivce;
                       public  IStudentSerivce getIStudentSerivcePorxyFactory(){
                               IStudentSerivce  iStudentSerivce=(IStudentSerivce) Proxy.newProxyInstance(
                                       StudentSerivceProxyFactory.class.getClassLoader(),
                                       StudentSerivceImp.class.getInterfaces(),this);
                               return iStudentSerivce;
                           }
                           @Override
                           public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                               //执行数据验证
                               System.out.println("=====---执行数据验证");
                               Object invoke = method.invoke(iStudentSerivce, args);
                               //进行执行日志的方法
                               System.out.println("进行执行日志的方法------------------");

                               return invoke;
                           }
    CGLIB代理
      第3方技术,Cglib代理可以对任何类生产代理，搭理的原理就是对目标对象进行继承你
      如目标对象被final 修饰了，那么是无法进行被Cglib代理的
        public class CglibProxyFactory implements MethodInterceptor {
                 public  IStudentSerivce  getIStudentSerivceCglib(){
                     //创建对象用于生成代理对象
                     Enhancer enhancer = new Enhancer();
                     //设置给谁进行代理
                     enhancer.setSuperclass(StudentSerivceImp.class);
                     //代理样进行做什么
                     enhancer.setCallback(this);
                     IStudentSerivce  iStudentSerivce=(IStudentSerivce)enhancer.create();

                     return  iStudentSerivce;
                 }
                 @Override
                 public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {
                     System.out.println("-------------执行数据验证---------------");

                     //调用对应的方法
                     Object o1 = methodProxy.invokeSuper(o, objects);

                     System.out.println("-----------=-------------进行执行日志的方法--");

                     return o1;
                 }
             }
---------------------------------------
AOP相关的术语
连接点JONINPOINT
切入点POINTCUT
通知ADVICE
   前缀通知
   后缀通知
   异常通知
   最终通知
   环绕通知
目标对象TARGET
织入WEAVING
代理PROXY
切面ASPECT

实现了AOP的配置
1.准备目标对象

                                   public class StudentSerivceImp implements IStudentSerivce {
                                       @Override
                                       public void save() throws Exception {
                                           //数据验证.方法
                                           System.out.println("我执行了,添加的方法");
                                           //进行调用对应的日志方法
                                       }
                                       @Override
                                       public void del() throws Exception {
                                            //数据验证.方法
                                           System.out.println("我运行了，删除的方法------");
                                           //进行调用对应的日志方法
                                       }
                                   }
2.准备通知
public class SpringAdvice {
                                 public  void  getBefore(){
                                     System.out.println("前置通知---");

                                 }

                                 public  void  getAfter(){
                                     System.out.println("最终通知");
                                 }


                                 public  Object getAround(ProceedingJoinPoint  pj)throws  Throwable{
                                     System.out.println("环绕通知前----执行方法---------");

                                     Object proceed = pj.proceed();//调用目标方法

                                     System.out.println("环绕通知前后=========----执行方法---------");

                                     return  proceed;
                                 }

                                 public  void  getExcption(){
                                     System.out.println("异常通知-----");

                                 }
                                 public  void  getAfterExceptino(){

                                     System.out.println("后置通知");

                                 }
                            }
3.配置通知织入到目标对象中
  execution(* com.spring.service.imp.*servcieImp.*(..))
 <!--1.注入目标对象-->
                                <bean name="studentSerivceImp" class="com.bj.serivce.imp.StudentSerivceImp"></bean>
                                <!--2。配置通知对象-->
                                <bean name="springAdvice" class="com.bj.serivce.advice.SpringAdvice"></bean>
                                <!--3.进通知织入到目标对象中-->
                                <aop:config>
                                    <!--
                                      切入点
                                        public void com.bj.serivce.imp.StudentSerivceImp.save()
                                            void com.bj.serivce.imp.StudentSerivceImp.save()
                                            * com.bj.serivce.imp.StudentSerivceImp.save()
                                             * com.bj.serivce.imp.StudentSerivceImp.*()
                                             * com.bj.serivce.imp.StudentSerivceImp.*(..)
                                             * com.bj.serivce.imp.*SerivceImp.*(..)
                                    -->
                                        <aop:pointcut id="pt" expression="execution(  * com.bj.serivce.imp.*SerivceImp.*(..))" />
                                        <aop:aspect ref="springAdvice">
                                            <!--配置对应的通知-->
                                             <aop:before method="getBefore" pointcut-ref="pt" />
                                             <!--后置通知-->
                                             <aop:after-returning method="getAfterExceptino" pointcut-ref="pt" />
                                            <!--环绕通知-->
                                            <aop:around method="getAround" pointcut-ref="pt" />
                                            <!--异常通知
                                              必须要有异常才能执行
                                            -->
                                            <aop:after-throwing method="getExcption" pointcut-ref="pt" />
                                            <!--最终通知-->
                                            <aop:after method="getAfter" pointcut-ref="pt" />
                                        </aop:aspect>


                                </aop:config>
                              </beans>
4.使用注解版的方法进行配置AOP
    目标对象
    通知
        //标识当前类为通知类
                                @Aspect
                                public class SpringAdvice {

                                    @Pointcut("execution(  * com.bj.spring.imp.*ServiceImp.*(..))")
                                    public   void   pt(){
                                    }


                                    @Before("SpringAdvice.pt()")
                                     public  void  getBefore(){
                                         System.out.println("前置通知---");
                                     }


                                     @After("SpringAdvice.pt()")
                                     public  void  getAfter(){
                                         System.out.println("最终通知");
                                     }


                                     @Around("execution(  * com.bj.spring.imp.*ServiceImp.*(..))")
                                     public  Object getAround(ProceedingJoinPoint  pj)throws  Throwable{
                                         System.out.println("环绕通知前----执行方法---------");

                                         Object proceed = pj.proceed();//调用目标方法

                                         System.out.println("环绕通知前后=========----执行方法---------");

                                         return  proceed;
                                     }

                                     @AfterThrowing("execution(  * com.bj.spring.imp.*ServiceImp.*(..))")
                                     public  void  getExcption(){
                                         System.out.println("异常通知-----");

                                     }
                                     @AfterReturning("execution(  * com.bj.spring.imp.*ServiceImp.*(..))")
                                     public  void  getAfterExceptino(){

                                         System.out.println("后置通知");

                                     }
                                }

------------------------------------------------
Spring 和JDBCTEMPLATE模版整合
   连接数据库
   @Test
                       public   void test() throws PropertyVetoException {
                            //1.获取连接池对象
                           ComboPooledDataSource dataSource
                                   = new ComboPooledDataSource();
                           dataSource.setDriverClass("com.mysql.jdbc.Driver");
                           dataSource.setJdbcUrl("jdbc:mysql://192.168.116.128:3306/testMysql?useUnicode=true&amp;characterEncoding=utf-8");
                           dataSource.setUser("root");
                           dataSource.setPassword("root");

                           //2.创建连接对象
                           JdbcTemplate jdbcTemplate = new JdbcTemplate();
                           jdbcTemplate.setDataSource(dataSource);
                           System.out.println("---------"+jdbcTemplate);
                           //编写sql
                          String sql="insert into users values(1,'amdin',123)";
                           int update = jdbcTemplate.update(sql);
                           System.out.println(update);
                       }
      完成对应增删改查...
         jdbcTmplate模版
             public class UsersDaoImp implements IUsersDao {

                                   private JdbcTemplate jdbcTemplate;



                                   @Override
                                   public void add(Users users) {
                                       String sql="INSERT INTO users values(null,?,?) ";

                                       jdbcTemplate.update(sql,users.getName(),users.getMonery());
                                   }

                                   @Override
                                   public void del(Users users) {
                                       String sql="delete  from users  where id =? ";
                                       jdbcTemplate.update(sql,users.getId());
                                   }

                                   @Override
                                   public void upeate(Users users) {
                                       String sql="UPDATE  users SET  NAME =? ,monery=? WHERE  id =? ";
                                       jdbcTemplate.update(sql,users.getName(),users.getMonery(),users.getId());
                                   }

                                   @Override
                                   public Users getById(Integer id) {
                                       String sql="SELECT * FROM users where id=?";

                                       return jdbcTemplate.queryForObject(sql, new RowMapper<Users>() {
                                           @Override
                                           public Users mapRow(ResultSet resultSet, int i) throws SQLException {
                                               Users  user= new Users();
                                               user.setId(resultSet.getInt("id"));
                                               user.setName(resultSet.getString("name"));
                                               user.setMonery(resultSet.getInt("monery"));
                                               return user;
                                           }
                                       });
                                   }

                                   @Override
                                   public int getTotal() {
                                       String  sql="select count(*) FROM users";
                                       return jdbcTemplate.queryForObject(sql,Integer.class);
                                   }

                                   @Override
                                   public List<Users> getALL() {
                                       String sql="SELECT * FROM users";
                                       return jdbcTemplate.query(sql, new RowMapper<Users>() {
                                           @Override
                                           public Users mapRow(ResultSet resultSet, int i) throws SQLException {

                                               Users  user= new Users();
                                               user.setId(resultSet.getInt("id"));
                                               user.setName(resultSet.getString("name"));
                                               user.setMonery(resultSet.getInt("monery"));
                                               return user;
                                           }
                                       });
                                   }

                                   public JdbcTemplate getJdbcTemplate() {
                                       return jdbcTemplate;
                                   }

                                   public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
                                       this.jdbcTemplate = jdbcTemplate;
                                   }
                               }
            注入到容器中
            <bean name="" clas="org.springxxxx.jdbc.core.jdbcTrmplate"
                 <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
                                         <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
                                         <property name="jdbcUrl" value="jdbc:mysql://192.168.116.128:3306/testMysql?useUnicode=true&amp;characterEncoding=utf-8" ></property>
                                         <property name="user"  value="root"></property>
                                        <property name="password" value="root"></property>
                                    </bean>
                                     <!--将JdbcTemplate注入到容器中-->
                                    <bean name="jdbctemplate" class="org.springframework.jdbc.core.JdbcTemplate">
                                        <property name="dataSource" ref="dataSource"></property>
                                    </bean>

                                    <!--将UsersDao注入到容器中-->
                                    <bean name="usersDao" class="com.bj.jdbc.dao.imp.UsersDaoImp">
                                        <property name="jdbcTemplate" ref="jdbctemplate"></property>
                                    </bean>

                JDBCDaoSupport这个类和JdbcTemplate是一样的功能

-----------------------------
引入外部资源
  properties
         <!--指定扫描配置文件-->
                                 <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

                                            <!--1.将连接池配置到容器中-->
                                             <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
                                                  <property name="driverClass" value="${jdbc.driverClass}"></property>
                                                  <property name="jdbcUrl" value="${jdbc.jdbcUrl}" ></property>
                                                  <property name="user"  value="${jdbc.user}"></property>
                                                 <property name="password" value="${jdbc.password}"></property>
                                             </bean>
                                            <!--将UsersDao注入到容器中-->
                                            <bean name="usersDao" class="com.bj.jdbc.dao.imp.UsersDaoImp2">
                                                <property name="dataSource" ref="dataSource"></property>
                                            </bean>
------------------------------
事务
   事务特性
     原子性
     一致性
     隔离性
     持久性
  事务并发
     脏读
     不可重复读
     幻读虚读
    事务传播属性

           propagation  传播属性
                                        保证再一个事务中
                                          REQUIRED     支持当前事务,如果不存在事务,就进行创建一个新的事务
                                          SUPPORTS      支持当前事务，如果不存在，就不使用事务
                                          MANDATORY    支持当前事务,如不存在，抛出异常
                                        没有在同一个事务中
                                            REQUIRES_NEW    如有事务,存在，挂起当前事务，创建一个新的事务
                                             NOT_SUPPORTED   以非事务的方法运行，如有事务存在，挂起当前事务
                                             NEVER   以非事务函数运行，如有事务存在，抛出异常
                                              NESTED   如当前事务存在，这进行嵌套事务执行
事务模版的配置
   使用模版
       1.将核心的事务管理器,进行配置到容器中
                  <!--将核心的事务配置到容器中-->
                   <bean
                        name="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
                       <property name="dataSource" ref="datasource"></property>
                   </bean>
                 <!--配置事务模版对象-->
                 <bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
                      <property name="transactionManager" ref="transactionManager"></property>
                 </bean>
       2.进行配置对应的模版
             public class UsersSerivceImp  implements  UsersSerivce{
                 private UsersDao   usersdao;
                 private TransactionTemplate  transactionTemplate;

                 @Override
                 public void getTestSpring(Integer id1, Integer id2, Integer monery) {

                     transactionTemplate.execute(new TransactionCallbackWithoutResult() {
                         @Override
                         protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
                             usersdao.addMonery(id1,monery);
                             System.out.println(1 / 0);
                             usersdao.updateMonery(id2,monery);
                         }
                     });

                 }
        3.注入值
                 <!--将Serivce注入到容器中-->
                <bean name="usersSerivce" class="com.bj.spring.serivce.UsersSerivceImp">
                    <property name="usersdao" ref="usersdao"></property>
                    <property name="transactionTemplate" ref="transactionTemplate"></property>
                </bean>
xml文件的配置,结合AOP的方式
   <!--配置事务的通知-->
              <tx:advice id="txAdvice"   transaction-manager="transactionManager">
                    <tx:attributes>

                        <!--
                           进行配置什么样的方法需要事务
                              isolation 事务的隔离级别


                               propagation  传播属性
                                        保证再一个事务中
                                          REQUIRED     支持当前事务,如果不存在事务,就进行创建一个新的事务
                                          SUPPORTS      支持当前事务，如果不存在，就不使用事务
                                          MANDATORY    支持当前事务,如不存在，抛出异常
                                        没有在同一个事务中
                                            REQUIRES_NEW    如有事务,存在，挂起当前事务，创建一个新的事务
                                             NOT_SUPPORTED   以非事务的方法运行，如有事务存在，挂起当前事务
                                             NEVER   以非事务函数运行，如有事务存在，抛出异常
                                              NESTED   如当前事务存在，这进行嵌套事务执行

                              read-only  配置是否只读
                                 false  可操作
                                 true  只读
                        -->
                        <tx:method name="getTestSpring" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>

                            <!--企业中的标准方法-->
                        <tx:method name="add*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
                        <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
                        <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
                        <tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
                        <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>
                        <tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false"/>

                        <!--查询-->
                        <tx:method name="select*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
                        <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
                        <tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true"/>
                    </tx:attributes>
              </tx:advice>

                <!--5,织入到目标中-->
                    <aop:config>
                        <aop:pointcut id="txpointcut" expression="execution( * com.bj.spring.serivce.*.*(..))"/>
                        <!--配置切面-->
                        <aop:advisor advice-ref="txAdvice" pointcut-ref="txpointcut"></aop:advisor>
                    </aop:config>
注解的配置
        注解的方法 *****
            开启注解配置
                   <tx:annotation-driven></tx:annotation-driven>
   如下注解无论是在方法还是在类上都可以进行使用，
     如在方法上使用就是这个方法有事务
     如在类上使用，整个类都有对应的事务
 @Transactional(isolation = Isolation.REPEATABLE_READ,propagation =  Propagation.REQUIRED,readOnly = false)


-------------------------------------------------------------------------
springMVC







