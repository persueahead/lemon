1.Spring的描述
   1）Spring就是一个开源的一个设计层面的框架
      主要进行处理业务逻辑层和其他各层之间松耦合性的问题，
      是一个面向对象的一个编程思想进行贯穿到整个项目中的
      也是一个轻量级的开发框架
2.为什么要学Spring
    1.方便解耦,简化了开发
       1）Spring其实就一个很大的一个工厂，可以将所有的对象
         进行创建和依赖的关系来进维护，这些都可以交给Spring
         来进行处理
    2.AOP的编程的支持
       2)Spring提供了面向切面的方式进行编程,可以方便的实现对程序
       进行权限的拦截,运行的监控,事务的处理。。。。。
    3.声名式事务的支持
       1)只需要通过配置就可以完成对事务的管理,无需进手动的编程
       2)如之前JDBC执行的事务
    4.方便进行测试程序
      1)Spring还支持对JUNIT的测试,我们可以通过注解的方式来进行测试程序
    5.便于集成各种优秀的框架
      1)Spring排斥各种优秀的开源框架
      2)Spring对JavaEE开发中非常难用的API（JDBC）,都进行了一系列的封装
         那么就让API降低了难度
    6.Spring 还一占式
       1)可以进行Spring家族的框架进行开发整个程序
         不需要他任何的第三方的框架
3.spring jar包的下载
   https://spring.io/projects/spring-framework#learn
    建议:初学者不要使用最新的,容易版本不匹配(和其他框架)
4.HelloWord
   1)导入jar包
         com.springsource.org.apache.commons.logging-1.1.1.jar
         com.springsource.org.apache.log4j-1.2.15.jar
         hamcrest-core-1.3.jar
         junit-4.12.jar
         spring-beans-5.0.8.RELEASE.jar
         spring-context-5.0.8.RELEASE.jar
         spring-core-5.0.8.RELEASE.jar
         spring-expression-5.0.8.RELEASE.jar
    2)创建对象(实体类 必须要有对应get  set 方法)
    3)再src目录下进行创建applicationContext.xml
    4)在applicationContext.xml中进行注入对应的容器
                <!--注册对应的容易
                  比如我们之前new Users()来进行创建对象，那么现在就不
                   用，之间交Spring来进行处理
                -->
                <bean name="users" class="com.bj.spring.pojo.Users"></bean>
    5)进行测试
            @org.junit.Test
                  public   void test(){
                      //1.创建容器对象的
                      ClassPathXmlApplicationContext context =
                              new ClassPathXmlApplicationContext("applicationContext.xml");
                            //从容器中获取对象
                      Users users = (Users) context.getBean("users");

                      System.out.println(users);
                  }
5.spring与Log4j的集成
     1）加入对应的jar包
        com.springsource.org.apache.log4j-1.2.15.jar
     2）在SRC目录下进行创建 log4j.properties
            log4j.rootLogger=DEBUG, stdout
            # Console output...
            log4j.appender.stdout=org.apache.log4j.ConsoleAppender
            log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
            log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n

6.Spring 核心 概念
    IOC/DI
    AOP(后续讲解)
  1)IOC 控制反转
     1.对象在被纯创建的时候,有一个调空系统类所有的对象的外界实体,将其所依赖
       的对象的引用传递给它
        如:Users  users =new Users()
     2.使用Spring之后对象的创建以及对应的依赖,都交给Spring来进行完成创建。注入
     3.控制反转,说白了，就是反转对象的创建方式.程序员的创建对象都交给了程序来进行完成
  2)DI  依赖注入
     1.实现IOC的思想，就需DI的支持
     2.注入的方式
         set 方法注入
         构造方法注入
         属性值的注入
      3.注入类型
         值类型注入(8答基本数据类型)
         引用类型注入(依赖对象的注入)
      4.说白，我们之前注入值的时候，user.setId(11)
         那么现在使用了SpringDI依赖注入,我们就不使用之前的方式来进行注入
         注入的方式就交给了Spring 了
    3)BeanFactory(在资源缺乏的时候使用)
      1)Spring的原始接口,实现类笔记单一
      2)该原始接口，实现类的容器特点,就是每次获取对象时,才会进行创建一个新的对象
        如图一:
    4)AppllcationContext(一般都是使用)
       1）每次容器会进行自动的创建容器中配置的对象
       两大实现类
          ClassPathXmlApplicationContext类(使用)
                从类路径下进行查询加载的配置资源
          FileSystemXmlApplicationContext类（很少使用）
                new FileSystemXmlApplicationContext();
                是从硬盘绝对的路径下记性加载配置路径



