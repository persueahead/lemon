1. 面向对象-多态
	什么是多态：同一函数，多种形态。同一个事物具有不同的体现形式。
	父亲  儿子  丈夫  职员
	作用：
		消除类之间的耦合关系
	多态存在的条件：
		1.要有继承
		2.要有重写
		3.父类的引用指向子类的对象	
	分类：
		1.静态多态
			编译时候多态:程序在编译的时候，系统技能决定调用哪个函数，重载 ，静态多态和继承没有必然关系
		2.动态多态	
			运行时候多态，重写，在运行的时候决定调用哪个方法
	多态成员访问的特点：
		1、成员变量
			编译时看左边，运行时看左边
		2.成员方法
			编译的时候看左边，运行的时候看右边		
		3.静态方法
			编译的时候看左边（父类）,运行时候看左边		
		4.构造函数
			创建子类对象的时候，访问的是父类的构造函数	
	向上转型的基础：
		1.父类的引用执行子类的实例，调用的函数为重写后的内容
		2.不能使用子类特有的功能		
	解耦，提高代码扩展性，但是只能使用父类中的引用	
	向下转型：
		子类 子类引用 = （子类）父类引用对象；
	instanceof运算符:
		用来在运行时指出对象是否是特定类或者是它子类的一个实例。
		boolean result = object instanceof class
		object :任意对象的表达式
		class:类名 必须是对象类
	注意：
		使用instanceof判断的时候两个类必须有关系
2.修饰符static 静态的
   	 可以用来修饰变量、方法、代码块，不能用来修饰类（不考虑内部类）
   	 2.1.修饰变量：
   	 	所有对象都拥有的特性,所有对象共享这个变量，称之为类变量，在类加载的时候被初始化，并且只被初始化一次
   	 	在程序中任何对象对静态变量做了改变，其它的对象看到的都是修改后的值
   	   调用静态变量：
   	   	本类：直接使用
   	   	不同类中：
   	   		方式1： 创建对象  类名  引用名称 = new 类名();
   	   						引用名称.属性名
   	   		方式2：建议使用这种  类名.属性名称	
   	   总结：
   	   	1.静态变量可以在静态的函数中和非静态函数中直接使用，非静态的变量不能直接在静态方法中使用
   	   	2.一定要有数据共享的时候在使用
   	   	3.局部变量不能通过static 修饰	
   	  2.2.修饰方法：
   	  		代表所有的对象共同拥有的功能，又称为静态方法
   	  		调用：
   	  			本类中： 直接调用
   	  			不同的类中：
   	  				创建对象的方式调用
   	  				类名.方法名()
   	  		注意：
   	  			权限修饰符和静态修饰可以交换位置使用，建议先权限修饰符
   	  			静态方法只能访问静态成员（静态变量或静态方法）
   	  			在静态方法中不允许出现this super关键字
   	  	2.3 static 代码块
   	  		static{
   	  			代码...
   	  		}		
   	  		在类加载的时候被调用，并且只会被调用一次
   	  		执行顺序：
   	  			静态代码块优先于构造函数执行
   	  		作用：
   	  			优化程序的性能，可以放置在类的任意位置
   	  			类中可以有多个静态代码块，按照代码块顺序执行		
   	  
   	   		
  3.单例模式  
  	3.1 概述 
  	单例模式是Java中最简单的设计模式之一。
  	这种类型的设计模式属于对象创建型模式。
  	作用：保证一个类仅有一个实例，并提供一个访问它的全局访问点.
    3.2 理解
    	某些类创建对象是非常耗时耗内存和复杂的，这种类创建的创建的对象我称为重量级对象（反之轻量级）
    	如果需要使用重量级类，一般把这个类设计为单例模式对象：
    		1.保证对象在内存仅有一个，减少内存开销
    		2.使用者不用考虑创建的细节，使用变量
    		3.可以控制对象的创建时候
    	关键点：
    		提供一个访问它的全局访问点：一个公开的静态方法，返回唯一的实例.
    3.3 饿汉式
    		立即创建
    		线程安全
    		没有延迟加载
    3.4  懒汉式		
    		延迟创建
    		线程不安全		
4.final关键字:终极的 最终的
	主要修饰：
		属性  方法  类
	4.1.属性	
		被final修饰符的变量为常量（所有的单词大写，单词之间用下划线分割）
		一旦赋值不能改变，final修饰的常量不会有默认的初始值
		final定义变量的时候一般和static结合使用
		注意：
			用final修饰的属性的时候，是常量，不能更改
			public static final String USER_NAME= "张三";
			使用类名.常量名调用 Demo.USER_NAME
			和static一起使用
			static 和 final修饰符位置可以交换
  	4.2.修饰方法
  			final修饰方法为终极的方法，不能被重写
  			在一个类被继承的时候，除了私有的属性和方法，其它的都能被继承，如果一个方法不想被继承不想被重写
  			，可以顶一个final修饰的方法
  	4.3.修饰类
  			该类终极的类，不能被继承，被final修饰的类中所有的方法都是终极的方法
  		使用场景：
  			防止代码功能被重写，没有必要的扩展	
  
   	   	