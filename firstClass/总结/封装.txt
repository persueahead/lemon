1.匿名对象
	概述：没有名字的实体，该实体没有对应的变量名指向它
	用途：对方法进行一次调用的时候，简化代码
	注意：
		a.使用匿名对象的时候对调用一次方法的时候使用，如果多次调用不建议使用
		b.使用匿名对象在调用属性的时候没有任何意义，所以不使用
		
2.对象的调用
	2.1  在同一个类中
		属性调用:
			成员变量:
			不管是修饰符是public、private都可以调用 
			在类中定义，是对象所私有的
			类变量：  static 数据类型 变量名=值  所有对象所共有的
				 直接调用
		方法调用	
			成员方法：
				创建对象，通过使用对象名.方法名(参数列表)
			静态方法：使用static修饰的方法   
				直接调用或者通过创建对象的方式调用
		
	2.2 在不同的类中		
		属性调用:
			成员变量:
				private私有的变量不能调用
			类变量：  static 数据类型 变量名=值    
					类名.属性名
					通过创建对象的方式调用
					Phone phone = new Phone();
					System.out.println(phone.sccj);
		方法调用	
			成员方法：
				创建对象，通过使用对象名.方法名(参数列表)
			静态方法：使用static修饰的方法   
				a. 可以通过类名.方法名（参数列表） Phone.playGame();  建议使用这种
				b. 通过创建对象的方式调用
					Phone phone = new Phone();
					phone.playGame();
		注意： 普通成员方法可以调用普通成员变量、成员方法、静态变量、静态方法
		            在静态方法中只能调用静态的成员（静态属性和静态方法）
		           如果在使用非静态的方法和属性的时候，必须要创建对象，通过对象名调用        
		
		
3.封装	
	面向对象三大特性： 封装(解决代码的安全性)  继承(解决代码重用性)  多态（解决代码扩展）	
	封装：隐藏属性的实现细节，仅对外提供公共的访问方式set get
	private：
		是一个权限修饰符，用于修饰成员（成员变量和成员方法）
		一旦被private修饰的属性和方法只能在本类中使用
	好处：
		将变化进行隔离，提高重用性，提高的安全性	
	封装的原则：
		1.将不需要对外提供的内容可以封装起来
		2.把属性隐藏，对外提供公共的访问方法  setAge()  getAge()
	总结：
		如果不使用封装，很容易出现赋值错误，并且任何人都可以进行更改，造成信息不安全		
 	
 	属性封装的步骤：
 		1.给成员变量添加private 关键字
 		2.对外提公开的set和get方法
 		3.在set方法中加入逻辑判断，过滤非法的数据
 	方法的封装：
 		不然其他的类访问某个类的方法,在方法上添加private 进行封装，那么就只能在本类中访问		
		
3.构造函数	
	主函数main
		保证一个Java类能够独立执行，是程序的入口文件
		public static void main(String[] ages){}
	普通的函数
		修饰符  返回值类型  函数名称(参数列表){
			功能代码
			return 返回值;
		}
	构造函数
		作用：用于给对象进行初始化
		结构体：
			修饰符  类名(参数列表){
				初始值
			}	
	特点：
		1.不需要定义返回值类型
		2.该函数/方法的名称和所在的类的名称保持一致
		3.构造方法也可以进行重载	
		4.在创建对象的时候使用构造函数/方法
	注意：	
		如果一个类中没有构造函数，系统会默认给我们创建一个无参数的构造函数
		如果存在构造函数，系统会使用我们自己创建的构造函数，如果不想使用带参数的构造函数需要自己创建一个	
		
4.构造函数和普通函数的区别
	4.1 结构体
		普通函数
		 修饰符  返回值类型  函数名称(参数列表){
		 	功能代码
		 	return 返回值;
		 }
		 构造函数：
		 	修饰符  类名(参数列表){
		 		初始值
		 	}			
	4.2 调用
		普通函数：可以多次调用
		构造函数：创建对象的时候才调用，主要用于初始值
	4.3 函数名称：
		普通函数：名称只要符合Java命名规范即可
		构造函数：必须和所在的类名一致
	4.4 功能定义
		普通函数：定义对象所具有的功能行为
		构造函数：对对象进行初始化内容
	4.5 返回值：
		构造函数没有返回值类型
		普通函数没有返回值类型的时候使用void代替
在一个Java类中可以有多个构造函数，进行不用的初始化，以重构的形式体现		
							
		
5. 构造代码块		
	概述：给所有的对象进行初始化，只要对象一创建就调用构造代码块，并且优先于构造函数执行
	结构体：
		｛
			初始化内容
		｝
	构造代码块和构造函数的区别：
		构造代码块给所有的对象进行初始化的时候，使用代码块
		构造函数当分析事物的时候，一旦事物出现就会具有某些特征，那么就通过构造函数定义这些特征	
		
		
		
		
		
					