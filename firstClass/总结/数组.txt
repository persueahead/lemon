数组
	1.数组的概述
		概念：一种新的数据类型，我们学习的第2个引用类型
		作用：用于存放多个同数据类型的值
		数组中元素：等于盒子，盒子中存放的值=元素值
		数组下标：盒子编号一般从0开始
		数组长度：盒子个数，数组一旦创建就不可以改变长度,数组长度是一个常量
	2.数组定义
		2.1定义思路：
			a.准备用数组转什么类型的数据
				byte int boolean String 等
			b.准备装几个
				需要估算大一些，长度不能改变
		2.2定义的方式：
			2.2.1默认值方式（不屑元素的值，写长度）
				int[] arr = new int[5];//元素默认值为0，长度为5
				String [] arr2 = new String[4];//元素默认值为null,长度为4
			2.2.1 直接值方式(不写长度，写元素值)
			byte[] arr1 = new byte[]{1,3,4,5};//长度为4
			byte[] arr2 = {1,3,4,5};
			
		2.3 不同类型数组元素的默认值：
			基础类型数组默认值：
				数字为0 布尔为false
			引用数据类型默认值为null		
						
	3.数组的赋值和取值
		3.1 数组的长度
			int[] arr = new int[5];
			arr.length;//获取数组的长度
		3.2 赋值和取值
				int[] arr = new int[5];//{0,0,0,0,0}
				//赋值
				arr[0] = 1;//{1,0,0,0,0}
				arr[arr.length-1] = 2;//{1,0,0,0,2}
			
				//取值
				int a = arr[1];//0
				int b = arr[arr.length-1];//2
		
		3.3 数组下标越界问题
			数组下标越界异常
			java.lang.ArrayIndexOutOfBoundsException:
	
	
	4.数组的遍历
		数组一旦定义，其长度不可以改变
		获取数组的长度是数组的length属性
		数组的下表是从0开始，数组最大下标等数组的长度-1（arr.length-1）
	
	5.数组的工具类Arrays
		数组的排序 sort
		数组的拷贝 copy
		数组的填充  fill
		数组的字符串表示  toString
		数组是否相等equals
    6. 可变参数列表
    	概念： 当方法的形参有数组类型时，可以假话实参写法
    	声明：数组参数定义使用三个点(...) 代替中括号[]
    	执行：实参可以采用数组定义的写法，也可以直接写数组元素
    	public static void test2(int... arr)
    7. 字符串
    	字符串本质：
    		就是一个不可以修改的char数组,不可以修改数组元素的值  char[]
    		永远不要再循环中使用+号拼接字符串
    8.StringBuffer和StringBuilder
      append() 追加
      insert()插入
      delete()删除
      setCharAt() 修改
      replace()替换		
    
    9.JVM 内存模型
    	9.1 Java虚拟机
    		JVM是JRE的一部分
    		是虚拟出来的程序运行环境,java程序在JVM中运行
  		9.2 Java内存模型
  			JVM 栈 ：局部变量、原生类型值
  			堆：成员变量、引用类型的数据
  			程序计数器：下一跳指令的地址
  			本地方法栈：
  			方法区：类信息（类名、方法）  字符串池 常量池		
  			
  			栈内存和堆内存
  			 栈存放（自动释放）：局部变量、原生类型的存值 、引用类型存地址
  			 堆内存（GC回收）：引用类型的实际数据
  			 栈存取速度比堆要快
  		9.3 垃圾回收器（GC）=回收垃圾占用的空间
  			垃圾：
  				每次栈中数据销毁时候，引用类型变量存放的地址也会被销毁，会导致堆中大量无关的内存空间出现(垃圾)	  
    
        9.4 方法区中的字符串池
        		创建：
        		  a.字面值方式(存放在方法区中的字符串池中)
        		  	String s = "123";
        		  	字符串池的使用：
        		  		如果某个字符串在池中已存在，则不新建字符串，而是直接复用，返回地址到对应变量中。
						如果不存在，则新建后放入字符串池中，然后把地址保存在对应变量中。
        		  		
        		  	
        		  b.标准对象创建方式(存放在堆中)
    				Stirng s = new String("123");
    
    
    
    	
    